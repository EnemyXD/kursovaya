{"version":3,"sources":["components/dialogs/dialogs.module.css","hoc/withAuthRedirect.js","components/dialogs/dialogItem/DialogItem.jsx","components/dialogs/messages/Messages.jsx","components/dialogs/Dialogs.jsx","components/dialogs/DialogsContainer.jsx"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","DialogItem","className","s","imgUser","src","logo512","dialog","userName","activeClassName","dialog_active","Messages","message","DialogsFormik","validationSchema","Yup","required","initialValues","onSubmit","values","sendMessage","validateOnBlur","type","id","name","placeholder","component","textError","Dialogs","dialogElement","dialogsData","map","d","messageElement","messagesData","m","dialogs","dialogsItems","messages","compose","newMessageBody","dialogsPage","dispatch","body","sendMessageCreator"],"mappings":"uGACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,cAAgB,+BAA+B,SAAW,0BAA0B,QAAU,yBAAyB,QAAU,2B,mJCGhQC,EAA6B,SAACC,GAAD,MAAY,CAC3CC,OAAQD,EAAME,KAAKD,SAGRE,EAAmB,SAACC,GAAe,IACxCC,EADuC,4JAE3C,WACE,OAAKC,KAAKC,MAAMN,OAGT,cAACG,EAAD,eAAeE,KAAKC,QAFlB,cAAC,IAAD,CAAUC,GAAG,eAJmB,GACbC,IAAML,WAatC,OAJqCM,YAAQX,EAARW,CACnCL,K,0FCLWM,EAVI,SAACJ,GAChB,OACI,gCACI,qBAAKK,UAAaC,IAAEC,QAASC,IAAOC,MACpC,cAAC,IAAD,CAASJ,UAAWC,IAAEI,OAAQT,GAAE,mBAAcD,EAAMW,UAAYC,gBAAiBN,IAAEO,cAAnF,SAAmGb,EAAMW,eCGtGG,EATE,SAACd,GACd,OACI,qBAAKK,UAAWC,IAAES,QAAlB,SACKf,EAAMe,W,wBCwBbC,EAAgB,SAAChB,GAEnB,IAQMiB,EAAmBC,IAAW,CAChCH,QAASG,MAAaC,SAAS,cAGnC,OACI,cAAC,IAAD,CACIC,cAdc,CAClBL,QAAS,IAcLM,SAXY,SAACC,GACjBtB,EAAMuB,YAAYD,IAWdL,iBAAkBA,EAClBO,gBAAgB,EAJpB,SAKI,eAAC,IAAD,WACI,gCACI,cAAC,IAAD,CAAOC,KAAK,OAAOC,GAAG,UAAUC,KAAK,UACjCC,YAAY,uBAChB,cAAC,IAAD,CAAcD,KAAK,UAAUE,UAAWC,SAE5C,8BACI,wBAAQL,KAAK,SAAb,kCAULM,EAxDC,SAAC/B,GAEb,IAAIgC,EAAgBhC,EAAMiC,YAAYC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAYxB,SAAUwB,EAAER,UAEnES,EAAiBpC,EAAMqC,aAAaH,KAAI,SAAAI,GAAC,OAAI,cAAC,EAAD,CAAUvB,QAASuB,EAAEvB,aAEtE,OACI,sBAAKV,UAAWC,IAAEiC,QAAlB,UACI,qBAAKlC,UAAWC,IAAEkC,aAAlB,SACKR,IAEL,sBAAK3B,UAAWC,IAAEmC,SAAlB,UACI,8BAAML,IACN,cAAC,EAAD,CAAeb,YAAavB,EAAMuB,qB,iCCKnCmB,sBACXvC,aAnBkB,SAACV,GACnB,MAAO,CACHkD,eAAgBlD,EAAMmD,YAAYD,eAClCV,YAAaxC,EAAMmD,YAAYX,YAC/BI,aAAc5C,EAAMmD,YAAYP,aAChC3C,OAAQD,EAAME,KAAKD,WAIF,SAACmD,GACtB,MAAM,CACFtB,YAAa,SAACuB,GACVD,EAASE,YAAmBD,SAQpClD,IAFW8C,CAGbX","file":"static/js/4.44b6ce40.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"dialogs_dialogs__2aKJF\",\"dialogsItems\":\"dialogs_dialogsItems__FOqPB\",\"dialog\":\"dialogs_dialog__2p5qH\",\"dialog_active\":\"dialogs_dialog_active__iLa5T\",\"messages\":\"dialogs_messages__3aS8i\",\"message\":\"dialogs_message__3DWs4\",\"imgUser\":\"dialogs_imgUser__3U56Q\"};","import React from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n  isAuth: state.auth.isAuth,\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n  class RedirectComponent extends React.Component {\r\n    render() {\r\n      if (!this.props.isAuth) {\r\n        return <Redirect to=\"/login\" />;\r\n      }\r\n      return <Component {...this.props} />;\r\n    }\r\n  }\r\n\r\n  let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(\r\n    RedirectComponent\r\n  );\r\n\r\n  return ConnectedAuthRedirectComponent;\r\n};\r\n","import s from './../dialogs.module.css'\r\nimport { NavLink, Route } from 'react-router-dom'\r\nimport logo512 from \"./../../../Assets/images/logo512.png\";\r\n\r\nconst DialogItem = (props) => {\r\n    return (\r\n        <div>\r\n            <img className = {s.imgUser} src = {logo512}/>\r\n            <NavLink className={s.dialog} to={`/dialogs/${props.userName}`} activeClassName={s.dialog_active}>{props.userName}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default DialogItem;","import s from './../dialogs.module.css'\r\n\r\nconst Messages = (props) => {\r\n    return (\r\n        <div className={s.message}>\r\n            {props.message}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Messages;","import React from 'react'\r\nimport s from './dialogs.module.css'\r\nimport DialogItem from './dialogItem/DialogItem'\r\nimport Messages from './messages/Messages'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { ErrorMessage, Field, Form, Formik } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport textError from '../common/textError'\r\n\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let dialogElement = props.dialogsData.map(d => <DialogItem userName={d.name} />)\r\n\r\n    let messageElement = props.messagesData.map(m => <Messages message={m.message} />)\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogElement}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messageElement}</div>\r\n                <DialogsFormik sendMessage={props.sendMessage} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst DialogsFormik = (props) => {\r\n\r\n    const initialValues = {\r\n        message: ''\r\n    }\r\n\r\n    const sendMessage = (values) => {\r\n        props.sendMessage(values)\r\n    }\r\n\r\n    const validationSchema = Yup.object({\r\n        message: Yup.string().required('Required')\r\n    })\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={initialValues}\r\n            onSubmit={sendMessage}\r\n            validationSchema={validationSchema}\r\n            validateOnBlur={false}>\r\n            <Form>\r\n                <div>\r\n                    <Field type='text' id='message' name='message'\r\n                        placeholder='Enter your message' />\r\n                    <ErrorMessage name='message' component={textError} />\r\n                </div>\r\n                <div>\r\n                    <button type='submit'>\r\n                        Send message\r\n                </button>\r\n                </div>\r\n            </Form>\r\n        </Formik>\r\n    )\r\n}\r\n\r\n\r\nexport default Dialogs;","import React from 'react'\r\nimport Dialogs from './Dialogs'\r\nimport { sendMessageCreator} from '../../redux/dialogs_reducer'\r\nimport { connect } from 'react-redux'\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect'\r\nimport {compose} from 'redux'\r\n\r\n//Container создан для передачи компоненте необходимых ей данных, что бы \r\n//не загрязнять презентационную компоненту\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        newMessageBody: state.dialogsPage.newMessageBody,\r\n        dialogsData: state.dialogsPage.dialogsData,\r\n        messagesData: state.dialogsPage.messagesData,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return{\r\n        sendMessage: (body) => {\r\n            dispatch(sendMessageCreator(body))\r\n        }\r\n    }\r\n}\r\n\r\n// передаем второй параметр через все обработчики первого параметра, начиная с последнего\r\nexport default compose (\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n"],"sourceRoot":""}