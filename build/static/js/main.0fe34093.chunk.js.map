{"version":3,"sources":["common/error.module.css","components/navbar/navbar.module.css","API/api.ts","components/navbar/NavBar.tsx","common/textError.tsx","API/chatApiv2.ts","API/authApi.ts","API/profileApi.ts","redux/chat-Reducer.ts","redux/profile-Reducer.ts","components/login/LoginForm.tsx","redux/selectors.ts","components/login/Login.tsx","components/profile/Profile.tsx","components/profile/ProfileContainer.tsx","components/reg/Reg.tsx","components/findUser/FindUser.tsx","components/findUser/FindByEmailForm.tsx","components/findUser/FindByEmail.tsx","components/findUser/FindByName.tsx","components/posts/Posts.tsx","API/advertisementApi.ts","redux/advertisement-Reducer.ts","components/posts/AllAdvertisement.tsx","components/posts/MyAdvertisement.tsx","components/posts/CreateAdvertisement.tsx","components/chat/Chat.tsx","components/chat/CommonChat.tsx","components/chat/ChatUsers.tsx","App.tsx","reportWebVitals.js","redux/redux-store.ts","index.tsx","components/findUser/FindUsers.module.css","components/posts/posts.module.css","App.module.css"],"names":["module","exports","ResultCodeEnum","NavBar","props","className","s","NavBarMain","exact","item","activeClassName","item_active","to","textError","porps","error","children","socket","instance","axios","create","withCredentials","baseURL","authApi","login","pass","onSubmitProps","post","email","password","then","res","catch","err","console","log","response","status","setErrors","data","phone","profileApi","get","name","chatApi","roomName","io","disconnect","message","username","emit","text","initState","CommonMessages","PrivateMessages","actions","messages","type","payload","ConnectSocket","dispatch","a","SubscribeToAll","on","msg","Data","DisconnectSocket","initApp","auth","findByEmail","initFBE","findByName","initFBN","registrationSuccess","user","array","ProfileReducer","state","action","LoginForm","useDispatch","validationSchema","Yup","required","initialValues","onSubmit","values","setSubmitting","resultCode","success","d","loginThunk","formik","id","component","disabled","isSubmitting","getEmail","profilePage","getLogin","getAuth","getFindByEmail","getFindByName","getInitApp","getInitAllAdvertisement","advertisement","initAll","getInitMyAdvertisement","initMy","getAllAdvertisementSelector","allAdvertisement","getMyAdvertisementSelector","myAdvertisement","getRegistrationSuccess","getRedirectAfterCreateAdv","redirectAfterCreate","getInitFBN","getMessages","chatPage","getPrivateMessages","Login","useSelector","history","useHistory","push","Profile","onClick","ProfileContainer","Reg","yup","repeatPass","phoneNumber","FindUser","FindByEmailForm","findUserByEmail","FindByEmail","map","contactPhone","color","FindByName","React","memo","findUserByName","el","Posts","advertisementApi","shortText","descriprtion","images","tags","formData","FormData","append","JSON","stringify","headers","getAllAdvertisement","getMyAdvertisement","AllAdvertisement","useEffect","findFromAll","getAllAdvertisementWithKey","src","file","img","description","createdAt","updatedAt","obj","userId","MyAdvertisement","findFromMy","getMyAdvertisementWithKey","isDeleted","_id","CreateAdvertisement","redirect","split","createAdvertisement","accept","onChange","event","target","files","length","setFieldValue","Chat","CommonChat","useState","setMessage","isAutoScroll","setIsAutoScroll","messagesAnchorRef","useRef","current","scrollIntoView","behavior","style","height","overflowY","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","Message","ref","value","ChatUsers","arrayPath","location","pathname","usernameMy","compose","withRouter","init","MainDiv","Header","AllContent","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"yFACAA,EAAOC,QAAU,CAAC,MAAQ,uB,yCCA1BD,EAAOC,QAAU,CAAC,WAAa,2BAA2B,KAAO,qBAAqB,YAAc,8B,4CCCxFC,E,0ECICC,EAA8B,SAACC,GAC1C,OACE,sBAAKC,UAAWC,IAAEC,WAAlB,UACE,8BACE,cAAC,IAAD,CACEC,OAAK,EACLH,UAAWC,IAAEG,KACbC,gBAAiBJ,IAAEK,YACnBC,GAAG,IAJL,uBASF,8BACE,cAAC,IAAD,CAASP,UAAWC,IAAEG,KAAMC,gBAAiBJ,IAAEK,YAAaC,GAAG,SAA/D,qBAIF,8BACE,cAAC,IAAD,CAASP,UAAWC,IAAEG,KAAMC,gBAAiBJ,IAAEK,YAAaC,GAAG,YAA/D,yBAIF,8BACE,cAAC,IAAD,CAASP,UAAWC,IAAEG,KAAMC,gBAAiBJ,IAAEK,YAAaC,GAAG,QAA/D,wB,wDCnBOC,EAJwB,SAACC,GACtC,OAAO,qBAAKT,UAAWC,IAAES,MAAlB,SAA0BD,EAAME,Y,kEFN7Bd,O,qBAAAA,I,kBAAAA,M,KAWL,IGVIe,EHUEC,EAAWC,IAAMC,OAAO,CACnCC,iBAAiB,EACjBC,QAAS,0BIbEC,EAAU,SACfC,EAAeC,EAAcC,GACjC,OAAOR,EACJS,KADI,SACoD,CACvDC,MAAOJ,EACPK,SAAUJ,IAEXK,MAAK,SAACC,GAAD,OAASA,KACdC,OAAM,SAACC,GAAS,IAAD,EACdC,QAAQC,IAAIF,GACiB,OAAzB,UAAAA,EAAIG,gBAAJ,eAAcC,SAChBX,EAAcY,UAAU,CACtBd,MAAO,6BACPC,KAAM,mCAbLF,EAAU,WAmBnB,OAAOL,EACJS,KADI,UAC8B,IAClCG,MAAK,SAACC,GAAD,OAASA,EAAIQ,SArBZhB,EAAU,SAuBjBC,EAAeI,EAAeH,EAAce,GAC9C,OAAOtB,EACJS,KAAuB,OAAQ,CAAEH,QAAOI,QAAOH,OAAMe,UACrDV,MAAK,SAACC,GAAD,OAASA,EAAIQ,SCzBZE,EAAa,WAEtB,OAAOvB,EACJwB,IADI,WAEJZ,MAAK,SAACC,GAAD,OAASA,EAAIQ,SAJZE,EAAa,SAMZb,GACV,OAAOV,EACJS,KAA+B,cAAe,CAAEC,UAChDE,MAAK,SAACC,GAAD,OAASA,EAAIQ,SATZE,EAAa,SAWbE,GACT,OAAOzB,EACJS,KAA+B,aAAc,CAAEgB,SAC/Cb,MAAK,SAACC,GAAD,OAASA,EAAIQ,S,QFZZK,EACF,SAACC,GAEN5B,EADE4B,EACOC,aAAG,kCAAoCD,GAEvCC,aAAG,0BALLF,EAQC,WAAO,IAAD,EACV,QAAN,EAAA3B,SAAA,SAAQ8B,cATCH,EAWF,SAACI,EAAiBC,GAAsB,IAAD,EACxC,QAAN,EAAAhC,SAAA,SAAQiC,KAAK,iBAAkB,CAC7BD,SAAUA,EACVE,KAAMH,KAdCJ,EAiBD,SAACI,EAAiBC,GAAsB,IAAD,EACzC,QAAN,EAAAhC,SAAA,SAAQiC,KAAK,kBAAmB,CAC9BD,SAAUA,EACVE,KAAMH,KGrBRI,EAAY,CACdC,eAAgB,GAChBhB,OAAQ,UACRiB,gBAAiB,IAuDNC,EACa,SAACC,GAAD,MACrB,CACCC,KAAM,sCACNC,QAAS,CAAEF,cAJJD,EAMc,SAACC,GAAD,MACtB,CACCC,KAAM,uCACNC,QAAS,CAAEF,cATJD,EAWe,SAACC,GAAD,MACvB,CACCC,KAAM,wCACNC,QAAS,CAAEF,cAdJD,EAgBM,iBACd,CACCE,KAAM,iCAlBCF,EAoBO,iBACf,CACCE,KAAM,kCAtBCF,EAwBgB,SAACC,GAAD,MACxB,CACCC,KAAM,yCACNC,QAAS,CAAEF,cAIJG,EACX,yDAAwC,WAAOC,GAAP,SAAAC,EAAA,sEAChCjB,IADgC,2CAAxC,uDAIWkB,EACX,yDAAwC,WAAOF,GAAP,SAAAC,EAAA,sDAChC,OAAN5C,QAAM,IAANA,KAAQ8C,GAAG,oBAAoB,SAACC,GAC9B9B,QAAQC,IAAI,uBACZyB,EAASL,EAAiCS,OAGtC,OAAN/C,QAAM,IAANA,KAAQ8C,GAAG,kBAAkB,SAACC,GAC5B9B,QAAQC,IAAI,uBACZyB,EACEL,EAA+B,CAC7BN,SAAUe,EAAIf,SACdE,KAAMa,EAAIb,KACVc,KAAMD,EAAIC,WAZsB,2CAAxC,uDAkBWC,EACX,yDAAwC,WAAON,GAAP,SAAAC,EAAA,6DACtCD,EAASL,KACTK,EAASL,KAF6B,SAGhCX,IAHgC,2CAAxC,uDC1GEQ,EAAY,CACde,SAAS,EACT3C,MAAO,GACPI,MAAO,GACPwC,MAAM,EACNC,YAAa,KACbC,SAAS,EACTC,WAAY,KACZC,SAAS,EACTC,qBAAqB,GA6EVlB,EACK,SAAC/B,EAAeI,GAAhB,MACb,CACC6B,KAAM,yBACNjC,QACAI,UALO2B,EAOH,iBACL,CACCE,KAAM,mBATCF,GAWK,SAACmB,GAAD,MACb,CACCjB,KAAM,yBACNiB,SAdOnB,GAgBI,SAACoB,GAAD,MACZ,CACClB,KAAM,wBACNkB,MAAOA,IAnBApB,GAqBL,iBACH,CACCE,KAAM,oBAvBCF,GAyBN,iBACF,CACCE,KAAM,gBA3BCF,GA6BH,iBACL,CACCE,KAAM,mBA2FGmB,GAlMQ,WAGK,IAF1BC,EAEyB,uDAFjBzB,EACR0B,EACyB,uCACzB,OAAQA,EAAOrB,MACb,IAAK,yBACH,OAAO,2BACFoB,GADL,IAEErD,MAAOsD,EAAOtD,MACdI,MAAOkD,EAAOlD,MACdwC,MAAM,IAGV,IAAK,iBACH,OAAO,2BACFS,GADL,IAEErD,MAAO,GACPI,MAAO,GACPwC,MAAM,IAGV,IAAK,yBACH,OAAO,2BACFS,GADL,IAEER,YAAY,YAAKS,EAAOJ,MACxBJ,SAAS,IAGb,IAAK,wBACH,OAAO,2BACFO,GADL,IAEEN,WAAYO,EAAOH,MACnBH,SAAS,IAGb,IAAK,kBACH,OAAO,2BACFK,GADL,IAEEV,SAAS,IAGb,IAAK,cACH,OAAO,2BACFU,GADL,IAEEJ,qBAAqB,IAGzB,IAAK,iBACH,OAAO,2BACFI,GADL,IAEEJ,qBAAqB,IAGzB,IAAK,qBACH,OAAO,2BACFI,GADL,IAEEP,SAAS,IAGb,IAAK,qBACH,OAAO,2BACFO,GADL,IAEEL,SAAS,IAGb,QACE,OAAOK,I,SC1EAE,GAAiC,SAAC3E,GAC7C,IAAMwD,EAAWoB,cAOXC,EAAmBC,KAAW,CAClC1D,MAAO0D,OAAaC,SAAS,YAC7B1D,KAAMyD,OAAaC,SAAS,cAQ9B,OACE,cAAC,IAAD,CACEC,cAjBkB,CACpB5D,MAAO,GACPC,KAAM,IAgBJ4D,SAR2B,SAACC,EAAQ5D,GACtCA,EAAc6D,eAAc,GAC5B3B,ED6GF,SACEpC,EACAC,EACAC,GAHF,8CAKA,WAAOkC,GAAP,eAAAC,EAAA,sEACuBtC,EAAcC,EAAOC,EAAMC,GADlD,OACMU,EADN,OAEEV,EAAc6D,eAAc,IAChB,OAARnD,QAAQ,IAARA,OAAA,EAAAA,EAAUG,KAAKiD,cAAetF,EAAeuF,SAC/C7B,EACEL,EAAuBnB,EAASG,KAAKmD,EAAElE,MAAOY,EAASG,KAAKmD,EAAE9D,SAGtD,OAARQ,QAAQ,IAARA,OAAA,EAAAA,EAAUG,KAAKiD,cAAetF,EAAea,OAC/CW,EAAcY,UAAU,CACtBd,MAAO,6BACPC,KAAM,+BAXZ,2CALA,sDC7GWkE,CAAWL,EAAO9D,MAAO8D,EAAO7D,KAAMC,KAO7CuD,iBAAkBA,EAHpB,SAKG,SAACW,GACA,OACE,eAAC,IAAD,CAAMC,GAAG,gBAAgBlD,KAAK,gBAA9B,UACE,wCACA,gCACE,cAAC,IAAD,CAAOc,KAAK,OAAOoC,GAAG,QAAQlD,KAAK,UACnC,cAAC,IAAD,CAAcA,KAAK,QAAQmD,UAAWjF,OAExC,2CACA,gCACE,cAAC,IAAD,CAAO4C,KAAK,WAAWoC,GAAG,OAAOlD,KAAK,SACtC,cAAC,IAAD,CAAcA,KAAK,OAAOmD,UAAWjF,OAEvC,gCACE,wBAAQ4C,KAAK,SAASsC,SAAUH,EAAOI,aAAvC,mBAGA,cAAC,IAAD,CAASpF,GAAG,OAAZ,oCCxDDqF,GAAW,SAACpB,GACvB,OAAOA,EAAMqB,YAAYtE,OAGduE,GAAW,SAACtB,GACvB,OAAOA,EAAMqB,YAAY1E,OAGd4E,GAAU,SAACvB,GACtB,OAAOA,EAAMqB,YAAY9B,MAGdiC,GAAiB,SAACxB,GAC7B,OAAOA,EAAMqB,YAAY7B,aAGdiC,GAAgB,SAACzB,GAC5B,OAAOA,EAAMqB,YAAY3B,YAGdgC,GAAa,SAAC1B,GACzB,OAAOA,EAAMqB,YAAY/B,SAGdqC,GAA0B,SAAC3B,GACtC,OAAOA,EAAM4B,cAAcC,SAGhBC,GAAyB,SAAC9B,GACrC,OAAOA,EAAM4B,cAAcG,QAGhBC,GAA8B,SAAChC,GAC1C,OAAOA,EAAM4B,cAAcK,kBAGhBC,GAA6B,SAAClC,GACzC,OAAOA,EAAM4B,cAAcO,iBAGhBC,GAAyB,SAACpC,GACrC,OAAOA,EAAMqB,YAAYzB,qBAGdyC,GAA4B,SAACrC,GACxC,OAAOA,EAAM4B,cAAcU,qBAGhBC,GAAa,SAACvC,GACzB,OAAOA,EAAMqB,YAAY1B,SAOd6C,GAAc,SAACxC,GAC1B,OAAOA,EAAMyC,SAASjE,gBAGXkE,GAAqB,SAAC1C,GACjC,OAAOA,EAAMyC,SAAShE,iBCxCTkE,GAboB,SAACpH,GAClC,IAAMgE,EAAOqD,YAAYrB,IACnBsB,EAAUC,cAIhB,OAHIvD,GACFsD,EAAQE,KAAK,KAGb,gCACE,+CACA,cAAC,GAAD,QCbOC,GAA+B,SAACzH,GAC3C,IAAMoB,EAAQiG,YAAYtB,IACpBvE,EAAQ6F,YAAYxB,IAEpBrC,EAAWoB,cAMjB,OACE,gCACE,0CACA,8BACE,2CAAcxD,OAEhB,8BACE,4CAAeI,OAEjB,8BACE,wBAAQkG,QAdG,WACflE,EJsJF,uCAAoC,WAAOA,GAAP,SAAAC,EAAA,sEACbtC,IADa,cAErBiE,aAAetF,EAAeuF,UACzC7B,EAASM,KACTN,EAASL,MAJuB,2CAApC,wDIzIM,wBCHOwE,GAf+B,SAAC3H,GAC7C,IAAMgE,EAAOqD,YAAYrB,IACnBsB,EAAUC,cAMhB,OAJKvD,GACHsD,EAAQE,KAAK,UAIb,8BACE,cAAC,GAAD,OCGOI,GAA2B,SAAC5H,GACvC,IAAMqE,EAAsBgD,YAAYR,IAClCrD,EAAWoB,cACX0C,EAAUC,cAEZlD,IACFb,EAASL,IACTmE,EAAQE,KAAK,WAGf,IAQM3C,EAAmBgD,KAAW,CAClCzG,MAAOyG,OAAa9C,SAAS,YAC7BvD,MAAOqG,OAAa9C,SAAS,YAC7B1D,KAAMwG,OAAa9C,SAAS,YAC5B+C,WAAYD,OAAa9C,SAAS,cAkBpC,OACE,cAAC,IAAD,CACEC,cAhCkB,CACpB5D,MAAO,GACPI,MAAO,GACPH,KAAM,GACNyG,WAAY,GACZ1F,MAAO,IA4BL6C,SAlB2B,SAACC,EAAQ5D,GNiKxC,IACEiB,EACAf,EACAH,EACA0G,EMpKAzG,EAAc6D,eAAc,GACxBD,EAAO7D,OAAS6D,EAAO4C,YACzBxG,EAAcY,UAAU,CACtBb,KAAM,oBACNyG,WAAY,sBAEdxG,EAAc6D,eAAc,IAE5B3B,GNyJFjB,EMxJiB2C,EAAO9D,MNyJxBI,EMzJ+B0D,EAAO1D,MN0JtCH,EM1J6C6D,EAAO7D,KN2JpD0G,EM3J0D7C,EAAO9C,MNuJnE,uCAMA,WAAOoB,GAAP,SAAAC,EAAA,sEACuBtC,EAAYoB,EAAMf,EAAOH,EAAM0G,GADtD,cAEe3C,aAAetF,EAAeuF,SACzC7B,EAASL,MAHb,2CANA,yDM9II0B,iBAAkBA,EAHpB,SAKG,SAACW,GACA,OACE,eAAC,IAAD,CAAMC,GAAG,MAAMlD,KAAK,MAApB,UACE,gCACE,uBADF,UAIA,gCACE,cAAC,IAAD,CAAOc,KAAK,OAAOoC,GAAG,QAAQlD,KAAK,UACnC,cAAC,IAAD,CAAcA,KAAK,QAAQmD,UAAWjF,OAExC,gCACE,uBADF,YAIA,gCACE,cAAC,IAAD,CAAO4C,KAAK,OAAOoC,GAAG,QAAQlD,KAAK,UACnC,cAAC,IAAD,CAAcA,KAAK,QAAQmD,UAAWjF,OAExC,gCACE,uBADF,mBAIA,gCACE,cAAC,IAAD,CAAO4C,KAAK,WAAWoC,GAAG,QAAQlD,KAAK,UACvC,cAAC,IAAD,CAAcA,KAAK,QAAQmD,UAAWjF,OAExC,gCACE,uBADF,cAIA,gCACE,cAAC,IAAD,CAAO4C,KAAK,WAAWoC,GAAG,OAAOlD,KAAK,SACtC,cAAC,IAAD,CAAcA,KAAK,OAAOmD,UAAWjF,OAEvC,gCACE,uBADF,qBAIA,gCACE,cAAC,IAAD,CAAO4C,KAAK,WAAWoC,GAAG,aAAalD,KAAK,eAC5C,cAAC,IAAD,CAAcA,KAAK,aAAamD,UAAWjF,OAE7C,gCACE,wBAAQ4C,KAAK,SAASsC,SAAUH,EAAOI,aAAvC,iBAGA,cAAC,IAAD,CAASpF,GAAG,SAAZ,6B,oBC3GDwH,GAAgC,SAAChI,GAC5C,IAAMgE,EAAOqD,YAAYrB,IACnBsB,EAAUC,cAKhB,OAHKvD,GACHsD,EAAQE,KAAK,UAGb,gCACE,8BACE,cAAC,IAAD,CACEvH,UAAWC,KAAEG,KACbC,gBAAiBJ,KAAEK,YACnBH,OAAK,EACLI,GAAG,gBAJL,6BASF,8BACE,cAAC,IAAD,CACEP,UAAWC,KAAEG,KACbC,gBAAiBJ,KAAEK,YACnBH,OAAK,EACLI,GAAG,eAJL,gCCdKyH,GAAuC,SAACjI,GACnD,IAAMwD,EAAWoB,cASjB,OACE,cAAC,IAAD,CAAQI,cATY,CACpBxD,MAAO,IAQ+ByD,SALT,SAACC,EAAQ5D,GACtCA,EAAc6D,eAAc,GAC5B3B,ERsKF,SAAChC,EAAeF,GAAhB,8CACA,WAAOkC,GAAP,eAAAC,EAAA,sEACuBpB,EAAuBb,GAD9C,OACMQ,EADN,OAEEV,EAAc6D,eAAc,GACxBnD,EAASoD,aAAetF,EAAeuF,SACzC7B,EAASL,GAAuBnB,EAASsD,IAJ7C,2CADA,sDQtKW4C,CAAgBhD,EAAO1D,MAAOF,KAGvC,SACG,SAACkE,GACA,OACE,eAAC,IAAD,CAAMC,GAAG,MAAMlD,KAAK,MAApB,UACE,yCAGA,8BACE,cAAC,IAAD,CAAOc,KAAK,OAAOoC,GAAG,QAAQlD,KAAK,YAErC,8BACE,wBAAQc,KAAK,SAASsC,SAAUH,EAAOI,aAAvC,2BC1BDuC,GAAmC,WAC9C,IAAM7D,EAAsB+C,YAAYpB,IAElCjC,EAAOqD,YAAYrB,IACnBsB,EAAUC,cAMhB,OAJKvD,GACHsD,EAAQE,KAAK,UAIb,gCACE,cAAC,GAAD,IACClD,GACCA,EAAK8D,KAAI,SAAC9D,GAAD,OACP,gCACE,8BACE,iDAAaA,QAAb,IAAaA,OAAb,EAAaA,EAAMzB,cAErB,8BACE,kDAAcyB,QAAd,IAAcA,OAAd,EAAcA,EAAM9C,WAEtB,8BACE,kDAAc8C,QAAd,IAAcA,OAAd,EAAcA,EAAM+D,kBAEtB,8BACE,wBACEX,QAAS,WACPJ,EAAQE,KAAR,qBAA2BlD,EAAK9C,SAFpC,oBAQF,oBAAI8G,MAAM,oBClBTC,GAAkCC,IAAMC,MAAK,SAACzI,GACzD,IAAMgE,EAAOqD,YAAYrB,IACnBsB,EAAUC,cACAF,YAAYL,IAEvBhD,GACHsD,EAAQE,KAAK,UAGf,IAAMlD,EAAsB+C,YAAYnB,IAElC1C,EAAWoB,cAgBjB,OAHA9C,QAAQC,IAAI,cACZD,QAAQC,IAAIuC,GAGV,gCACE,cAAC,IAAD,CAAQU,cAjBU,CACpBxD,MAAO,IAgBiCyD,SATX,SAACC,EAAQ5D,GACtCA,EAAc6D,eAAc,GAC5B3B,EVsJF,SAACjB,EAAcjB,GAAf,8CACA,WAAOkC,GAAP,eAAAC,EAAA,sEACuBpB,EAAsBE,GAD7C,OACMP,EADN,OAEEV,EAAc6D,eAAc,GACxBnD,EAASoD,aAAetF,EAAeuF,SACzC7B,EAASL,GAAsBnB,EAASsD,IAJ5C,2CADA,sDUtJWoD,CAAexD,EAAO1D,MAAOF,KAOpC,SACG,SAACkE,GACA,OACE,eAAC,IAAD,CAAMC,GAAG,MAAMlD,KAAK,MAApB,UACE,uCACA,8BACE,cAAC,IAAD,CAAOc,KAAK,OAAOoC,GAAG,QAAQlD,KAAK,YAErC,8BACE,wBAAQc,KAAK,SAASsC,SAAUH,EAAOI,aAAvC,0BAQTtB,IAAI,OACHA,QADG,IACHA,OADG,EACHA,EAAM8D,KAAI,SAACO,GACT,OACE,gCACE,8BACE,0CAAaA,EAAG9F,cAElB,8BACE,4CAAe8F,EAAGnH,WAEpB,8BACE,2CAAcmH,EAAGN,kBAEnB,8BACE,wBACEX,QAAS,WACPJ,EAAQE,KAAR,qBAA2BmB,EAAGnH,SAFlC,oBAQF,oBAAI8G,MAAM,uB,SCvFXM,GAA6B,SAAClI,GACzC,IAAM4G,EAAUC,cACHF,YAAYrB,KAGvBsB,EAAQE,KAAK,UAef,OACE,gCACE,gCACE,wBAAQE,QAfU,WACtBJ,EAAQE,KAAK,cAcT,+BACA,wBAAQE,QAZW,WACvBJ,EAAQE,KAAK,eAWT,mCAEF,8BACE,wBAAQE,QAXc,WAC1BJ,EAAQE,KAAK,kBAUT,wCC/BKqB,GAAmB,WAE5B,OAAO/H,EACJwB,IAAgD,sBAChDZ,MAAK,SAACC,GAAD,OAASA,EAAIQ,SAJZ0G,GAAmB,WAO5B,OAAO/H,EACJwB,IAAgD,qBAChDZ,MAAK,SAACC,GAAD,OAASA,EAAIQ,SATZ0G,GAAmB,SAY5BC,EACAC,EACAC,EACAC,GAEA,IAAMC,EAAW,IAAIC,SAKrB,OAJAD,EAASE,OAAO,YAAaN,GAC7BC,GAAgBG,EAASE,OAAO,cAAeL,GAC/CC,GAAUE,EAASE,OAAO,SAAUJ,GACpCC,GAAQC,EAASE,OAAO,OAAQC,KAAKC,UAAUL,IACxCnI,EACJS,KAAuB,wBAAyB2H,EAAU,CACzDK,QAAS,CAAE,eAAgB,yBAE5B7H,MAAK,SAACC,GAAD,OAASA,EAAIQ,SA1BZ0G,GAAmB,SA4BpBC,GACR,OAAOhI,EACJS,KAAiD,YAAa,CAC7DuH,cAEDpH,MAAK,SAACC,GAAD,OAASA,EAAIQ,SAjCZ0G,GAAmB,SAmCrBC,GACP,OAAOhI,EACJS,KAAiD,WAAY,CAC5DuH,cAEDpH,MAAK,SAACC,GAAD,OAASA,EAAIQ,SAxCZ0G,GAAmB,SA0CvBpD,GACL,OAAO3E,EACJS,KAAuB,SAAU,CAChCkE,OAED/D,MAAK,SAACC,GAAD,OAASA,EAAIQ,SC7CrBa,GAAY,CACd4D,gBAAiB,KACjBJ,QAAQ,EACRE,iBAAkB,KAClBJ,SAAS,EACTS,qBAAqB,GAuDV5D,GACS,SAACkD,GAAD,MACjB,CACChD,KAAM,mCACNgD,kBAJOlD,GAMU,SAACkD,GAAD,MAClB,CACChD,KAAM,oCACNgD,kBATOlD,GAWC,iBACT,CACCE,KAAM,gCAbCF,GAeE,iBACV,CACCE,KAAM,iCAjBCF,GAmBM,iBACd,CACCE,KAAM,kCArBCF,GAuBK,iBACb,CACCE,KAAM,iCAICmG,GACX,SAAClI,GAAD,8CACA,WAAOkC,GAAP,eAAAC,EAAA,sEACuBoF,KADvB,OACM7G,EADN,OAEe,OAAbV,QAAa,IAAbA,KAAe6D,eAAc,GACzBnD,EAASoD,aAAetF,EAAeuF,SACzC7B,EAASL,GAA4BnB,EAASsD,IAJlD,2CADA,uDASWmE,GACX,SAACnI,GAAD,8CACA,WAAOkC,GAAP,eAAAC,EAAA,sEACuBoF,KADvB,OACM7G,EADN,OAEe,OAAbV,QAAa,IAAbA,KAAe6D,eAAc,GACzBnD,EAASoD,aAAetF,EAAeuF,SACzC7B,EAASL,GAA2BnB,EAASsD,IAJjD,2CADA,uD,oBC9EWoE,GAAwC,WACnD,IAAMpC,EAAUC,cACHF,YAAYrB,KAGvBsB,EAAQE,KAAK,UAEf,IAAMlB,EAAUe,YAAYjB,IACtB5C,EAAWoB,cACXyB,EAAgBgB,YAAYZ,IAElC3E,QAAQC,IAAIuE,EAAU,KACtBqD,qBAAU,WAIR,OAHKrD,GACH9C,EAASgG,MAEJ,WACL1H,QAAQC,IAAIuE,EAAU,KACtB9C,EAASL,MACTrB,QAAQC,IAAIuE,EAAU,QAEvB,IAYH,OACE,8BACE,cAAC,IAAD,CAAQtB,cAZU,CACpB4E,YAAa,IAW2B3E,SARX,SAACC,EAAQ5D,GACtCA,EAAc6D,eAAc,GAC5BrD,QAAQC,IAAImD,EAAO0E,aACnBpG,EDgFF,SAAClC,EAAoBwH,GAArB,8CACA,WAAOtF,GAAP,eAAAC,EAAA,sEACuBoF,GAA2BC,GADlD,OACM9G,EADN,OAEEV,EAAc6D,eAAc,GACxBnD,EAASoD,aAAetF,EAAeuF,SACzC7B,EAASL,GAA4BnB,EAASsD,IAJlD,2CADA,sDChFWuE,CAA2BvI,EAAe4D,EAAO0E,eAKxD,SACG,SAACpE,GACA,OACE,eAAC,IAAD,CAAMC,GAAG,MAAMlD,KAAK,MAApB,UACE,gCACE,cAAC,IAAD,CAAOc,KAAK,OAAOoC,GAAG,cAAclD,KAAK,gBACzC,cAAC,IAAD,CAAcA,KAAK,cAAcmD,UAAWjF,IAC5C,wBAAQ4C,KAAK,SAASsC,SAAUH,EAAOI,aAAvC,qBAIDS,IAAa,OACZA,QADY,IACZA,OADY,EACZA,EAAe+B,KAAI,SAACO,GAClB,OACE,gCACE,8BACE,qBAAKmB,IAAKnB,EAAGK,OAAOe,KAAM9J,UAAWC,KAAE8J,QAEzC,8BACE,+CAAkBrB,EAAGG,eAEvB,8BACE,iDAAoBH,EAAGsB,YAAvB,SAEF,8BACE,6CAAgBtB,EAAGuB,eAErB,8BACE,6CAAgBvB,EAAGwB,eAErB,8BACE,yCACQ,IACLxB,EAAGM,KAAKb,KAAI,SAACgC,GACZ,OAAO,iCAAOA,EAAP,gBAIb,8BACE,4CAAezB,EAAG0B,YAEpB,oBAAI/B,MAAM,0BC3EnBgC,GAAuC,WAClD,IAAMhD,EAAUC,cACHF,YAAYrB,KAGvBsB,EAAQE,KAAK,UAGf,IAAMhB,EAASa,YAAYd,IACrB/C,EAAWoB,cACXyB,EAAgBgB,YAAYV,IAC7BH,GACHhD,EAASiG,MAEX3H,QAAQC,IAAIyE,GAMZmD,qBAAU,WAIR,OAHKnD,GACHhD,EAASgG,MAEJ,WACL1H,QAAQC,IAAIyE,EAAS,KACrBhD,EAASL,MACTrB,QAAQC,IAAIyE,EAAS,QAEtB,IAOH,OACE,8BACE,cAAC,IAAD,CAAQxB,cAtBU,CACpBuF,WAAY,IAqB4BtF,SAPX,SAACC,EAAQ5D,GACtCA,EAAc6D,eAAc,GAC5B3B,EFsFF,SAAClC,EAAoBwH,GAArB,8CACA,WAAOtF,GAAP,eAAAC,EAAA,sEACuBoF,GAA0BC,GADjD,OACM9G,EADN,OAEEV,EAAc6D,eAAc,GACxBnD,EAASoD,aAAetF,EAAeuF,SACzC7B,EAASL,GAA2BnB,EAASsD,IAJjD,2CADA,sDEtFWkF,CAA0BlJ,EAAe4D,EAAOqF,cAKvD,SACG,SAAC/E,GACA,OACE,eAAC,IAAD,CAAMC,GAAG,KAAKlD,KAAK,KAAnB,UACE,gCACE,cAAC,IAAD,CAAOc,KAAK,OAAOoC,GAAG,aAAalD,KAAK,eACxC,cAAC,IAAD,CAAcA,KAAK,aAAamD,UAAWjF,IAC3C,wBAAQ4C,KAAK,SAASsC,SAAUH,EAAOI,aAAvC,qBAIDS,GACCA,EAAc+B,KAAI,SAACO,GACjB,OACE,gCACE,8BACE,qBAAKmB,IAAKnB,EAAGK,OAAOe,KAAM9J,UAAWC,KAAE8J,QAEzC,8BACE,+CAAkBrB,EAAGG,eAEvB,8BACE,iDAAoBH,EAAGsB,YAAvB,SAEF,8BACE,6CAAgBtB,EAAGuB,eAErB,8BACE,6CAAgBvB,EAAGwB,eAErB,8BACE,yCACQ,IACLxB,EAAGM,KAAKb,KAAI,SAACgC,GACZ,OAAO,iCAAOA,EAAP,gBAIb,iDACiBzB,EAAG8B,UAAY,UAAY,eAE5C,8BACE,4CAAe9B,EAAG0B,aAElB1B,EAAG8B,WACH,8BACE,wBACE/C,QAAS,WF4CnC,IAACjC,EE3C2BjC,GF2C3BiC,EE3CyDkD,EAAG+B,IF2C7D,uCACA,WAAOlH,GAAP,SAAAC,EAAA,sEACuBoF,GAAwBpD,GAD/C,cAEeL,aAAetF,EAAeuF,SACzC7B,EAASiG,MAHb,2CADA,yDE7CwB,sBAUJ,oBAAInB,MAAM,yBClGnBqC,GAA2C,SAAC3K,GACvD,IAAM4K,EAAWvD,YAAYP,IACvBtD,EAAWoB,cACX0C,EAAUC,cACHF,YAAYrB,KAEvBsB,EAAQE,KAAK,UAGXoD,IACFpH,EAASL,MACTmE,EAAQE,KAAK,cAGf,IAOM3C,EAAmBgD,KAAW,CAClCiB,UAAWjB,OAAa9C,SAAS,cAkBnC,OACE,gCACE,uDACA,cAAC,IAAD,CACEC,cA9BgB,CACpB8D,UAAW,GACXmB,YAAa,GACbhB,KAAM,GACND,OAAQ,MA2BJ/D,SApByB,SAACC,EAAQ5D,GACtCQ,QAAQC,IAAImD,EAAO8D,QACnB1H,EAAc6D,eAAc,GAC5B,IAAM8D,EAAO/D,EAAO+D,KAAK4B,MAAM,KAC/BrH,EH8DF,SACElC,EACAwH,EACAmB,EACAjB,EACAC,GALF,8CAOA,WAAOzF,GAAP,eAAAC,EAAA,6DACE3B,QAAQC,IAAIiH,GADd,SAEuBH,GACnBC,EACAmB,EACAjB,EACAC,GANJ,OAEMjH,EAFN,OAQEV,EAAc6D,eAAc,GACxBnD,EAASoD,aAAetF,EAAeuF,SACzC7B,EAASL,MAVb,2CAPA,sDG7DI2H,CACExJ,EACA4D,EAAO4D,UACP5D,EAAO+E,YACP/E,EAAO8D,OACPC,KAWApE,iBAAkBA,EAHpB,SAKG,SAACW,GACA,OACE,eAAC,IAAD,CAAMC,GAAG,YAAYlD,KAAK,YAA1B,UACE,4CACA,gCACE,cAAC,IAAD,CAAOc,KAAK,OAAOoC,GAAG,YAAYlD,KAAK,cACvC,cAAC,IAAD,CAAcA,KAAK,YAAYmD,UAAWjF,OAE5C,8CACA,gCACE,cAAC,IAAD,CAAO4C,KAAK,OAAOoC,GAAG,cAAclD,KAAK,gBACzC,cAAC,IAAD,CAAcA,KAAK,cAAcmD,UAAWjF,OAE9C,yCACA,uBACEsK,OAAQ,oBACR1H,KAAK,OACL2H,SAAU,SAACC,GAA0C,IAAD,GAClD,UAAIA,EAAMC,OAAOC,aAAjB,aAAI,EAAoBC,UACtBtJ,QAAQC,IAAIkJ,EAAMC,OAAOC,MAAM,IAC/B3F,EAAO6F,cAAc,SAAUJ,EAAMC,OAAOC,MAAM,QAIxD,uCACA,gCACE,cAAC,IAAD,CAAO9H,KAAK,OAAOoC,GAAG,OAAOlD,KAAK,SAClC,cAAC,IAAD,CAAcA,KAAK,OAAOmD,UAAWjF,OAEvC,8BACE,wBAAQ4C,KAAK,SAASsC,SAAUH,EAAOI,aAAvC,gCC/FH0F,GAA4B,WACvC,IAAMtH,EAAOqD,YAAYrB,IACnBsB,EAAUC,cAIhB,OAHKvD,GACHsD,EAAQE,KAAK,UAGb,8BACE,8BACE,cAAC,IAAD,CAAShH,GAAG,YAAZ,8B,SCNK+K,GAAmC,WAC9C,IAAMvH,EAAOqD,YAAYrB,IACnBsB,EAAUC,cACXvD,GACHsD,EAAQE,KAAK,UAEf,IAAM3E,EAAWwE,YAAYxB,IANuB,EAOtB2F,mBAAS,IAPa,oBAO7C5I,EAP6C,KAOpC6I,EAPoC,KAQ9CrI,EAAWiE,YAAYJ,IARuB,EASZuE,oBAAS,GATG,oBAS7CE,EAT6C,KAS/BC,EAT+B,KAW9CC,EAAoBC,iBAAuB,MACjDlC,qBAAU,WACW,IAAD,EAAd+B,IACF,UAAAE,EAAkBE,eAAlB,SAA2BC,eAAe,CAAEC,SAAU,cAEvD,CAAC5I,IAcJ,OACE,gCACE,8CACA,sBACE6I,MAAO,CAAEC,OAAQ,QAASC,UAAW,QACrCC,SAlBgB,SAACC,GACrB,IAAMC,EAAUD,EAAEE,cAEhBC,KAAKC,IACHH,EAAQI,aAAeJ,EAAQK,UAAYL,EAAQM,cACjD,KAEHlB,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAgB,IAOhC,UAIGvI,EAASgF,KAAI,SAACO,GAAD,OACZ,cAACkE,GAAD,CAASjJ,IAAK+E,OAEhB,qBAAKmE,IAAKlB,OAEZ,gCACE,gCACE,0BACEZ,SAAU,SAACqB,GAAD,OAAOZ,EAAWY,EAAEE,cAAcQ,QAC5CA,MAAOnK,IAET,2BAEF,8BACE,wBACE8E,QAAS,WACPlF,EAAgBI,EAASC,GACzB4I,EAAW,KAHf,2BAcGoB,GAAsCrE,IAAMC,MAAK,YAAc,IAAX7E,EAAU,EAAVA,IAC/D,OACE,gCACE,2CAAcA,EAAIf,YAClB,uBACC,SACAe,EAAIb,KACL,uBACC,SACAa,EAAIC,KACL,6BCxEOmJ,GAA0B,WACrC,IAAMhJ,EAAOqD,YAAYrB,IACnBsB,EAAUC,cACV0F,EAAY3F,EAAQ4F,SAASC,SAAStC,MAAM,KAC5CvG,EAAO2I,EAAUA,EAAU7B,OAAS,GACpCgC,EAAa/F,YAAYxB,IACzBrC,EAAWoB,cAEZZ,GACHsD,EAAQE,KAAK,UAGfmC,qBAAU,WAIR,OAHAnG,EAASM,KACTtB,EAAA,UAAmB4K,EAAnB,YAAiC9I,IACjCd,EpBiGF,uCAAwC,WAAOA,GAAP,SAAAC,EAAA,sDAChC,OAAN5C,QAAM,IAANA,KAAQ8C,GAAG,qBAAqB,SAACC,GAC/B9B,QAAQC,IAAI6B,GACZJ,EAASL,EAAkCS,OAGvC,OAAN/C,QAAM,IAANA,KAAQ8C,GAAG,mBAAmB,SAACC,GAC7B9B,QAAQC,IAAI6B,GACZJ,EACEL,EAAgC,CAC9BN,SAAUe,EAAIf,SACdE,KAAMa,EAAIb,KACVc,KAAMD,EAAIC,WAZsB,2CAAxC,uDoBhGS,WAELL,EAASM,KACTN,EAASD,KACTC,EAASE,QAEV,IAtBwC,MAwBb8H,mBAAS,IAxBI,oBAwBpC5I,EAxBoC,KAwB3B6I,EAxB2B,OA0BHD,oBAAS,GA1BN,oBA0BpCE,EA1BoC,KA0BtBC,EA1BsB,KA4BrCvI,EAAWiE,YAAYF,IAEvByE,EAAoBC,iBAAuB,MACjDlC,qBAAU,WACW,IAAD,EAAd+B,IACF,UAAAE,EAAkBE,eAAlB,SAA2BC,eAAe,CAAEC,SAAU,cAEvD,CAAC5I,IAeJ,OACE,gCACE,6CAAgBkB,KAChB,sBACE2H,MAAO,CAAEC,OAAQ,QAASC,UAAW,QACrCC,SAlBgB,SAACC,GACrB,IAAMC,EAAUD,EAAEE,cAEhBC,KAAKC,IACHH,EAAQI,aAAeJ,EAAQK,UAAYL,EAAQM,cACjD,KAEHlB,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAgB,IAOhC,UAIGvI,EAASgF,KAAI,SAACO,GAAD,OACZ,cAACkE,GAAD,CAASjJ,IAAK+E,OAEhB,qBAAKmE,IAAKlB,OAEZ,gCACE,8BACE,0BACEZ,SAAU,SAACqB,GAAD,OAAOZ,EAAWY,EAAEE,cAAcQ,QAC5CA,MAAOnK,MAGX,8BACE,wBACE8E,QAAS,WACPlF,EAAiBI,EAASwK,GAC1B3B,EAAW,KAHf,2BCLK4B,gBAAkBC,IAAlBD,EA9CkB,SAACrN,GAChC,IAAMuN,EAAOlG,YAAYlB,IACnBnC,EAAOqD,YAAYrB,IACnBxC,EAAWoB,cAmBjB,OAjBK2I,GACH/J,EpBuIF,uCAAoC,WAAOA,GAAP,eAAAC,EAAA,sEACbpB,IADa,QAC9BL,EAD8B,SAGhCwB,EAASL,MAEPnB,EAASoD,aAAetF,EAAeuF,SACzC7B,EAASL,EAAuBnB,EAASsD,EAAElE,MAAOY,EAASsD,EAAE9D,QAN7B,2CAApC,uDoBpIAmI,qBAAU,WAQR,OAPI3F,GAKFR,ErBiGJ,uCAAwC,WAAOA,GAAP,SAAAC,EAAA,sDACtCD,EAASM,KACTN,EAASD,KACTC,EAASE,KAH6B,2CAAxC,uDqB/FS,WACLF,EAASM,QAEV,CAACE,IAGF,sBAAK/D,UAAWC,IAAEsN,QAAlB,UACE,qBAAKvN,UAAWC,IAAEuN,OAAlB,sBACA,sBAAKxN,UAAWC,IAAEwN,WAAlB,UACE,cAAC,EAAD,IACA,cAAC,IAAD,CAAOtN,OAAK,EAACuN,KAAK,IAAIjI,UAAWiC,KACjC,cAAC,IAAD,CAAOvH,OAAK,EAACuN,KAAK,YAAYjI,UAAWsC,KACzC,cAAC,IAAD,CAAO5H,OAAK,EAACuN,KAAK,gBAAgBjI,UAAWyC,KAC7C,cAAC,IAAD,CAAO/H,OAAK,EAACuN,KAAK,eAAejI,UAAW6C,KAC5C,cAAC,IAAD,CAAOnI,OAAK,EAACuN,KAAK,SAASjI,UAAWkD,KACtC,cAAC,IAAD,CAAOxI,OAAK,EAACuN,KAAK,aAAajI,UAAWgE,KAC1C,cAAC,IAAD,CAAOtJ,OAAK,EAACuN,KAAK,YAAYjI,UAAW4E,KACzC,cAAC,IAAD,CAAOlK,OAAK,EAACuN,KAAK,gBAAgBjI,UAAWiF,KAC7C,cAAC,IAAD,CAAOgD,KAAK,SAASjI,UAAW0B,KAChC,cAAC,IAAD,CAAOuG,KAAK,OAAOjI,UAAWkC,KAC9B,cAAC,IAAD,CAAOxH,OAAK,EAACuN,KAAK,YAAYjI,UAAW6F,KACzC,cAAC,IAAD,CAAOnL,OAAK,EAACuN,KAAK,QAAQjI,UAAW4F,KACrC,cAAC,IAAD,CAAOlL,OAAK,EAACuN,KAAK,mBAAmBjI,UAAWsH,cC3DzCY,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBpM,MAAK,YAAkD,IAA/CqM,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,UCDVO,GAAWC,aAAgB,CAC7BvI,YAAatB,GACb6B,cTOkC,WAGF,IAFhC5B,EAE+B,uDAFvBzB,GACR0B,EAC+B,uCAC/B,OAAQA,EAAOrB,MACb,IAAK,oCACH,OAAO,2BACFoB,GADL,IAEEiC,iBAAkBhC,EAAO2B,cACzBC,SAAS,IAGb,IAAK,mCACH,OAAO,2BACF7B,GADL,IAEEmC,gBAAiBlC,EAAO2B,cACxBG,QAAQ,IAGZ,IAAK,8BACH,OAAO,2BACF/B,GADL,IAEEsC,qBAAqB,IAGzB,IAAK,+BACH,OAAO,2BACFtC,GADL,IAEEsC,qBAAqB,IAGzB,IAAK,gCACH,OAAO,2BACFtC,GADL,IAEE6B,SAAS,IAGb,IAAK,+BACH,OAAO,2BACF7B,GADL,IAEE+B,QAAQ,IAGZ,QACE,OAAO/B,ISlDXyC,SvBGyB,WAGN,IAFnBzC,EAEkB,uDAFVzB,EACR0B,EACkB,uCAClB,OAAQA,EAAOrB,MACb,IAAK,yCACH,OAAO,2BACFoB,GADL,IAEEvB,gBAAgB,GAAD,mBAAMuB,EAAMvB,iBAAZ,YAAgCwB,EAAOpB,QAAQF,aAGlE,IAAK,wCACH,OAAO,2BACFqB,GADL,IAEExB,eAAe,GAAD,mBAAMwB,EAAMxB,gBAAZ,YAA+ByB,EAAOpB,QAAQF,aAGhE,IAAK,sCACH,OAAO,2BACFqB,GADL,IAEExB,eAAe,GAAD,mBAAMwB,EAAMxB,gBAAZ,CAA4ByB,EAAOpB,QAAQF,aAG7D,IAAK,uCACH,OAAO,2BACFqB,GADL,IAEEvB,gBAAgB,GAAD,mBAAMuB,EAAMvB,iBAAZ,CAA6BwB,EAAOpB,QAAQF,aAG/D,IAAK,+BACH,OAAO,2BACFqB,GADL,IAEExB,eAAgB,KAGpB,IAAK,gCACH,OAAO,2BACFwB,GADL,IAEEvB,gBAAiB,KAGrB,QACE,OAAO,eACFuB,OuBzBI6J,GAFHC,aAAYH,GAAUI,aAAgBC,OCnBlDC,IAASC,OACP,cAAC,IAAD,UACE,cAAC,IAAD,CAAUL,MAAOA,GAAjB,SACE,cAAC,GAAD,QAGJM,SAASC,eAAe,SAM1BjB,M,mBCpBAhO,EAAOC,QAAU,CAAC,KAAO,wBAAwB,YAAc,iC,mBCA/DD,EAAOC,QAAU,CAAC,IAAM,qB,mBCAxBD,EAAOC,QAAU,CAAC,QAAU,qBAAqB,OAAS,oBAAoB,WAAa,wBAAwB,OAAS,oBAAoB,QAAU,wB","file":"static/js/main.0fe34093.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"error_error__19x3I\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NavBarMain\":\"navbar_NavBarMain__MFKpW\",\"item\":\"navbar_item__2x_Tm\",\"item_active\":\"navbar_item_active__15xqs\"};","import axios from \"axios\";\r\n\r\nexport enum ResultCodeEnum {\r\n  success = 0,\r\n  error = 1,\r\n}\r\n\r\nexport type BaseResponseType<D = {}> = {\r\n  resultCode: ResultCodeEnum;\r\n  d: D;\r\n  message: String;\r\n};\r\n\r\nexport const instance = axios.create({\r\n  withCredentials: true,\r\n  baseURL: \"http://localhost:2929\",\r\n});\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport s from \"./navbar.module.css\";\r\n\r\ntype propsType = {};\r\n\r\nexport const NavBar: React.FC<propsType> = (props) => {\r\n  return (\r\n    <div className={s.NavBarMain}>\r\n      <div>\r\n        <NavLink\r\n          exact\r\n          className={s.item}\r\n          activeClassName={s.item_active}\r\n          to=\"/\"\r\n        >\r\n          Profile\r\n        </NavLink>\r\n      </div>\r\n      <div>\r\n        <NavLink className={s.item} activeClassName={s.item_active} to=\"/posts\">\r\n          Posts\r\n        </NavLink>\r\n      </div>\r\n      <div>\r\n        <NavLink className={s.item} activeClassName={s.item_active} to=\"/finduser\">\r\n          Find User\r\n        </NavLink>\r\n      </div>\r\n      <div>\r\n        <NavLink className={s.item} activeClassName={s.item_active} to=\"/chat\">\r\n          Chat\r\n        </NavLink>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport s from \"./error.module.css\";\r\n\r\ntype PropsType = {\r\n  children: (errorMessage: string) => React.ReactNode;\r\n};\r\n\r\nconst textError: React.ComponentType = (porps) => {\r\n  return <div className={s.error}>{porps.children}</div>;\r\n};\r\n\r\nexport default textError;\r\n","import { io, Socket } from \"socket.io-client\";\r\nimport { DefaultEventsMap } from \"socket.io-client/build/typed-events\";\r\n\r\nexport let socket: Socket<DefaultEventsMap, DefaultEventsMap> | null;\r\n\r\nexport const chatApi = {\r\n  connect: (roomName?: string) => {\r\n    if (roomName) {\r\n      socket = io(\"http://localhost:2929?roomName=\" + roomName);\r\n    } else {\r\n      socket = io(\"http://localhost:2929\");\r\n    }\r\n  },\r\n  disconnect: () => {\r\n    socket?.disconnect();\r\n  },\r\n  sendAll: (message: string, username: string) => {\r\n    socket?.emit(\"message-to-all\", {\r\n      username: username,\r\n      text: message,\r\n    });\r\n  },\r\n  sendRoom: (message: string, username: string) => {\r\n    socket?.emit(\"message-to-room\", {\r\n      username: username,\r\n      text: message,\r\n    });\r\n  },\r\n};\r\n","import { BaseResponseType, instance } from \"./api\";\r\n\r\nexport const authApi = {\r\n  login(login: string, pass: string, onSubmitProps: any) {\r\n    return instance\r\n      .post<BaseResponseType<loginResponseDataType>>(`/login`, {\r\n        email: login,\r\n        password: pass,\r\n      })\r\n      .then((res) => res)\r\n      .catch((err) => {\r\n        console.log(err);\r\n        if (err.response?.status === 401) {\r\n          onSubmitProps.setErrors({\r\n            login: \"login or password is wrong\",\r\n            pass: \"login or password is wrong\",\r\n          });\r\n        }\r\n      });\r\n  },\r\n  logout() {\r\n    return instance\r\n      .post<BaseResponseType>(`/logout`, {})\r\n      .then((res) => res.data);\r\n  },\r\n  reg(login: string, email: string, pass: string, phone?: string) {\r\n    return instance\r\n      .post<BaseResponseType>(\"/reg\", { login, email, pass, phone })\r\n      .then((res) => res.data);\r\n  },\r\n};\r\n\r\ntype loginResponseDataType = {\r\n  login: string;\r\n  email: string;\r\n};\r\n","import { user } from \"../redux/profile-Reducer\";\r\nimport { BaseResponseType, instance } from \"./api\";\r\n\r\nexport const profileApi = {\r\n  getWhoAmI() {\r\n    return instance\r\n      .get<BaseResponseType<loginResponseDataType>>(`/whoami`)\r\n      .then((res) => res.data);\r\n  },\r\n  findByEmail(email: string) {\r\n    return instance\r\n      .post<BaseResponseType<user[]>>(\"/find/email\", { email })\r\n      .then((res) => res.data);\r\n  },\r\n  findByName(name: string) {\r\n    return instance\r\n      .post<BaseResponseType<user[]>>(\"/find/name\", { name })\r\n      .then((res) => res.data);\r\n  },\r\n};\r\n\r\ntype loginResponseDataType = {\r\n  login: string;\r\n  email: string;\r\n};\r\n\r\ntype findUserByEmailType = {\r\n  username: string;\r\n  email: string;\r\n  contactPhone: string;\r\n};\r\n\r\ntype findUserByNameType = {\r\n  user: user[];\r\n};\r\n","import { chatApi, socket } from \"../API/chatApiv2\";\r\nimport { message, statusType, event } from \"../types/types\";\r\nimport { InferActionsType, ThunkType } from \"./redux-store\";\r\n\r\nlet initState = {\r\n  CommonMessages: [] as message[],\r\n  status: \"pending\" as statusType,\r\n  PrivateMessages: [] as message[],\r\n};\r\n\r\ntype initStateType = typeof initState;\r\n\r\nexport const chatReducer = (\r\n  state = initState,\r\n  action: actionChatReducerType\r\n): initStateType => {\r\n  switch (action.type) {\r\n    case \"chat-reducer/recieveOldMessagesPrivate\": {\r\n      return {\r\n        ...state,\r\n        PrivateMessages: [...state.PrivateMessages, ...action.payload.messages],\r\n      };\r\n    }\r\n    case \"chat-reducer/recieveOldMessagesCommon\": {\r\n      return {\r\n        ...state,\r\n        CommonMessages: [...state.CommonMessages, ...action.payload.messages],\r\n      };\r\n    }\r\n    case \"chat-reducer/messagesReceivedCommon\": {\r\n      return {\r\n        ...state,\r\n        CommonMessages: [...state.CommonMessages, action.payload.messages],\r\n      };\r\n    }\r\n    case \"chat-reducer/privateMessagesRecieved\": {\r\n      return {\r\n        ...state,\r\n        PrivateMessages: [...state.PrivateMessages, action.payload.messages],\r\n      };\r\n    }\r\n    case \"chat-reducer/clearCommonChat\": {\r\n      return {\r\n        ...state,\r\n        CommonMessages: [],\r\n      };\r\n    }\r\n    case \"chat-reducer/crearPrivateChat\": {\r\n      return {\r\n        ...state,\r\n        PrivateMessages: [],\r\n      };\r\n    }\r\n    default:\r\n      return {\r\n        ...state,\r\n      };\r\n  }\r\n};\r\n\r\ntype actionChatReducerType = InferActionsType<typeof actions>;\r\n\r\nexport const actions = {\r\n  messagesRecievedCommon: (messages: message) =>\r\n    ({\r\n      type: \"chat-reducer/messagesReceivedCommon\",\r\n      payload: { messages },\r\n    } as const),\r\n  privateMessagesRecieved: (messages: message) =>\r\n    ({\r\n      type: \"chat-reducer/privateMessagesRecieved\",\r\n      payload: { messages },\r\n    } as const),\r\n  recieveOldMessagesCommon: (messages: message[]) =>\r\n    ({\r\n      type: \"chat-reducer/recieveOldMessagesCommon\",\r\n      payload: { messages },\r\n    } as const),\r\n  clearCommonChat: () =>\r\n    ({\r\n      type: \"chat-reducer/clearCommonChat\",\r\n    } as const),\r\n  clearPrivateChat: () =>\r\n    ({\r\n      type: \"chat-reducer/crearPrivateChat\",\r\n    } as const),\r\n  recieveOldMessagesPrivate: (messages: message[]) =>\r\n    ({\r\n      type: \"chat-reducer/recieveOldMessagesPrivate\",\r\n      payload: { messages },\r\n    } as const),\r\n};\r\n\r\nexport const ConnectSocket =\r\n  (): ThunkType<actionChatReducerType> => async (dispatch) => {\r\n    await chatApi.connect();\r\n  };\r\n\r\nexport const SubscribeToAll =\r\n  (): ThunkType<actionChatReducerType> => async (dispatch) => {\r\n    socket?.on(\"recieveOldCommon\", (msg: message[]) => {\r\n      console.log(\"accepted old common\");\r\n      dispatch(actions.recieveOldMessagesCommon(msg));\r\n    });\r\n\r\n    socket?.on(\"message-to-all\", (msg: event) => {\r\n      console.log(\"accepted new common\");\r\n      dispatch(\r\n        actions.messagesRecievedCommon({\r\n          username: msg.username,\r\n          text: msg.text,\r\n          Data: msg.Data,\r\n        })\r\n      );\r\n    });\r\n  };\r\n\r\nexport const DisconnectSocket =\r\n  (): ThunkType<actionChatReducerType> => async (dispatch) => {\r\n    dispatch(actions.clearCommonChat());\r\n    dispatch(actions.clearPrivateChat());\r\n    await chatApi.disconnect();\r\n  };\r\n\r\nexport const SubscribeToRoom =\r\n  (): ThunkType<actionChatReducerType> => async (dispatch) => {\r\n    socket?.on(\"recieveOldPrivate\", (msg: message[]) => {\r\n      console.log(msg);\r\n      dispatch(actions.recieveOldMessagesPrivate(msg));\r\n    });\r\n\r\n    socket?.on(\"message-to-room\", (msg: event) => {\r\n      console.log(msg);\r\n      dispatch(\r\n        actions.privateMessagesRecieved({\r\n          username: msg.username,\r\n          text: msg.text,\r\n          Data: msg.Data,\r\n        })\r\n      );\r\n    });\r\n  };\r\n\r\nexport const ReconnectToAll =\r\n  (): ThunkType<actionChatReducerType> => async (dispatch) => {\r\n    dispatch(DisconnectSocket());\r\n    dispatch(ConnectSocket());\r\n    dispatch(SubscribeToAll());\r\n  };\r\n","import { ResultCodeEnum } from \"../API/api\";\r\nimport { authApi } from \"../API/authApi\";\r\nimport { profileApi } from \"../API/profileApi\";\r\nimport { ConnectSocket, DisconnectSocket } from \"./chat-Reducer\";\r\nimport { InferActionsType, ThunkType } from \"./redux-store\";\r\n\r\nexport type user = {\r\n  username: string;\r\n  email: string;\r\n  contactPhone: string;\r\n};\r\n\r\nlet initState = {\r\n  initApp: false,\r\n  login: \"\",\r\n  email: \"\",\r\n  auth: false,\r\n  findByEmail: null as user[] | null,\r\n  initFBE: false,\r\n  findByName: null as user[] | null,\r\n  initFBN: false,\r\n  registrationSuccess: false,\r\n};\r\n\r\ntype initStateProfileType = typeof initState;\r\n\r\nconst ProfileReducer = (\r\n  state = initState,\r\n  action: profileActionType\r\n): initStateProfileType => {\r\n  switch (action.type) {\r\n    case \"profile/SetProfileData\": {\r\n      return {\r\n        ...state,\r\n        login: action.login,\r\n        email: action.email,\r\n        auth: true,\r\n      };\r\n    }\r\n    case \"profile/LOGOUT\": {\r\n      return {\r\n        ...state,\r\n        login: \"\",\r\n        email: \"\",\r\n        auth: false,\r\n      };\r\n    }\r\n    case \"profile/setFindByEmail\": {\r\n      return {\r\n        ...state,\r\n        findByEmail: [...action.user],\r\n        initFBE: true,\r\n      };\r\n    }\r\n    case \"profile/setFindByName\": {\r\n      return {\r\n        ...state,\r\n        findByName: action.array,\r\n        initFBN: true,\r\n      };\r\n    }\r\n    case \"profile/setInit\": {\r\n      return {\r\n        ...state,\r\n        initApp: true,\r\n      };\r\n    }\r\n    case \"profile/reg\": {\r\n      return {\r\n        ...state,\r\n        registrationSuccess: true,\r\n      };\r\n    }\r\n    case \"profile/regOff\": {\r\n      return {\r\n        ...state,\r\n        registrationSuccess: false,\r\n      };\r\n    }\r\n    case \"profile/initFBEOff\": {\r\n      return {\r\n        ...state,\r\n        initFBE: false,\r\n      };\r\n    }\r\n    case \"profile/initFBNOff\": {\r\n      return {\r\n        ...state,\r\n        initFBN: false,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport type profileActionType = InferActionsType<typeof actions>;\r\n\r\nexport const actions = {\r\n  SetProfileData: (login: string, email: string) =>\r\n    ({\r\n      type: \"profile/SetProfileData\",\r\n      login,\r\n      email,\r\n    } as const),\r\n  Logout: () =>\r\n    ({\r\n      type: \"profile/LOGOUT\",\r\n    } as const),\r\n  setFindByEmail: (user: user[]) =>\r\n    ({\r\n      type: \"profile/setFindByEmail\",\r\n      user,\r\n    } as const),\r\n  setFindByName: (array: user[]) =>\r\n    ({\r\n      type: \"profile/setFindByName\",\r\n      array: array,\r\n    } as const),\r\n  init: () =>\r\n    ({\r\n      type: \"profile/setInit\",\r\n    } as const),\r\n  reg: () =>\r\n    ({\r\n      type: \"profile/reg\",\r\n    } as const),\r\n  regOff: () =>\r\n    ({\r\n      type: \"profile/regOff\",\r\n    } as const),\r\n  initFBEOff: () =>\r\n    ({\r\n      type: \"profile/initFBEOff\",\r\n    } as const),\r\n  initFBNOff: () =>\r\n    ({\r\n      type: \"profile/initFBNOff\",\r\n    } as const),\r\n};\r\n\r\nexport const loginThunk =\r\n  (\r\n    login: string,\r\n    pass: string,\r\n    onSubmitProps: any\r\n  ): ThunkType<profileActionType> =>\r\n  async (dispatch) => {\r\n    let response = await authApi.login(login, pass, onSubmitProps);\r\n    onSubmitProps.setSubmitting(false);\r\n    if (response?.data.resultCode === ResultCodeEnum.success) {\r\n      dispatch(\r\n        actions.SetProfileData(response.data.d.login, response.data.d.email)\r\n      );\r\n    }\r\n    if (response?.data.resultCode === ResultCodeEnum.error) {\r\n      onSubmitProps.setErrors({\r\n        login: \"login or password is wrong\",\r\n        pass: \"login or password is wrong\",\r\n      });\r\n    }\r\n  };\r\n\r\nexport const logoutThunk =\r\n  (): ThunkType<profileActionType> => async (dispatch) => {\r\n    let response = await authApi.logout();\r\n    if (response.resultCode === ResultCodeEnum.success) {\r\n      dispatch(DisconnectSocket());\r\n      dispatch(actions.Logout());\r\n    }\r\n  };\r\n\r\nexport const getWhoAmI =\r\n  (): ThunkType<profileActionType> => async (dispatch) => {\r\n    let response = await profileApi.getWhoAmI();\r\n    if (response) {\r\n      dispatch(actions.init());\r\n    }\r\n    if (response.resultCode === ResultCodeEnum.success) {\r\n      dispatch(actions.SetProfileData(response.d.login, response.d.email));\r\n      // dispatch(ConnectSocket());\r\n    }\r\n    // if (response.resultCode === ResultCodeEnum.error) {\r\n    //   dispatch(DisconnectSocket());\r\n    // }\r\n  };\r\n\r\nexport const findUserByEmail =\r\n  (email: string, onSubmitProps: any): ThunkType<profileActionType> =>\r\n  async (dispatch) => {\r\n    let response = await profileApi.findByEmail(email);\r\n    onSubmitProps.setSubmitting(false);\r\n    if (response.resultCode === ResultCodeEnum.success) {\r\n      dispatch(actions.setFindByEmail(response.d));\r\n    }\r\n  };\r\n\r\nexport const findUserByName =\r\n  (name: string, onSubmitProps: any): ThunkType<profileActionType> =>\r\n  async (dispatch) => {\r\n    let response = await profileApi.findByName(name);\r\n    onSubmitProps.setSubmitting(false);\r\n    if (response.resultCode === ResultCodeEnum.success) {\r\n      dispatch(actions.setFindByName(response.d));\r\n    }\r\n  };\r\n\r\nexport const Registration =\r\n  (\r\n    name: string,\r\n    email: string,\r\n    pass: string,\r\n    phoneNumber?: string\r\n  ): ThunkType<profileActionType> =>\r\n  async (dispatch) => {\r\n    let response = await authApi.reg(name, email, pass, phoneNumber);\r\n    if (response.resultCode === ResultCodeEnum.success) {\r\n      dispatch(actions.reg());\r\n    }\r\n  };\r\nexport default ProfileReducer;\r\n","import { ErrorMessage, Field, Form, Formik } from \"formik\";\r\nimport React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport textError from \"../../common/textError\";\r\nimport { loginThunk } from \"../../redux/profile-Reducer\";\r\nimport * as Yup from \"yup\";\r\n\r\ntype propsType = {};\r\n\r\ntype onSubmitType = (\r\n  values: {\r\n    login: string;\r\n    pass: string;\r\n  },\r\n  onSubmitProps: any\r\n) => void;\r\n\r\nexport const LoginForm: React.FC<propsType> = (props) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const initialValues = {\r\n    login: \"\",\r\n    pass: \"\",\r\n  };\r\n\r\n  const validationSchema = Yup.object({\r\n    login: Yup.string().required(\"Required\"),\r\n    pass: Yup.string().required(\"Required\"),\r\n  });\r\n\r\n  const onSubmit: onSubmitType = (values, onSubmitProps): void => {\r\n    onSubmitProps.setSubmitting(true);\r\n    dispatch(loginThunk(values.login, values.pass, onSubmitProps));\r\n  };\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={initialValues}\r\n      onSubmit={onSubmit}\r\n      validationSchema={validationSchema}\r\n    >\r\n      {(formik) => {\r\n        return (\r\n          <Form id=\"authorization\" name=\"authorization\">\r\n            <div>Email</div>\r\n            <div>\r\n              <Field type=\"text\" id=\"login\" name=\"login\" />\r\n              <ErrorMessage name=\"login\" component={textError} />\r\n            </div>\r\n            <div>Password</div>\r\n            <div>\r\n              <Field type=\"password\" id=\"pass\" name=\"pass\" />\r\n              <ErrorMessage name=\"pass\" component={textError} />\r\n            </div>\r\n            <div>\r\n              <button type=\"submit\" disabled={formik.isSubmitting}>\r\n                Login\r\n              </button>\r\n              <NavLink to=\"/reg\">Registration</NavLink>\r\n            </div>\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\n","import { createSelector } from \"reselect\";\r\nimport { AppStateType } from \"./redux-store\";\r\n\r\nexport const getEmail = (state: AppStateType) => {\r\n  return state.profilePage.email;\r\n};\r\n\r\nexport const getLogin = (state: AppStateType) => {\r\n  return state.profilePage.login;\r\n};\r\n\r\nexport const getAuth = (state: AppStateType) => {\r\n  return state.profilePage.auth;\r\n};\r\n\r\nexport const getFindByEmail = (state: AppStateType) => {\r\n  return state.profilePage.findByEmail;\r\n};\r\n\r\nexport const getFindByName = (state: AppStateType) => {\r\n  return state.profilePage.findByName;\r\n};\r\n\r\nexport const getInitApp = (state: AppStateType) => {\r\n  return state.profilePage.initApp;\r\n};\r\n\r\nexport const getInitAllAdvertisement = (state: AppStateType) => {\r\n  return state.advertisement.initAll;\r\n};\r\n\r\nexport const getInitMyAdvertisement = (state: AppStateType) => {\r\n  return state.advertisement.initMy;\r\n};\r\n\r\nexport const getAllAdvertisementSelector = (state: AppStateType) => {\r\n  return state.advertisement.allAdvertisement;\r\n};\r\n\r\nexport const getMyAdvertisementSelector = (state: AppStateType) => {\r\n  return state.advertisement.myAdvertisement;\r\n};\r\n\r\nexport const getRegistrationSuccess = (state: AppStateType) => {\r\n  return state.profilePage.registrationSuccess;\r\n};\r\n\r\nexport const getRedirectAfterCreateAdv = (state: AppStateType) => {\r\n  return state.advertisement.redirectAfterCreate;\r\n};\r\n\r\nexport const getInitFBN = (state: AppStateType) => {\r\n  return state.profilePage.initFBN;\r\n};\r\n\r\nexport const getInitFBE = (state: AppStateType) => {\r\n  return state.profilePage.initFBE;\r\n};\r\n\r\nexport const getMessages = (state: AppStateType) => {\r\n  return state.chatPage.CommonMessages;\r\n};\r\n\r\nexport const getPrivateMessages = (state: AppStateType) => {\r\n  return state.chatPage.PrivateMessages;\r\n};\r\n","import React from \"react\";\r\nimport { AppStateType, ThunkType } from \"../../redux/redux-store\";\r\nimport { LoginForm } from \"./LoginForm\";\r\nimport { loginThunk } from \"../../redux/profile-Reducer\";\r\nimport { connect, useSelector } from \"react-redux\";\r\nimport { profileActionType } from \"../../redux/profile-Reducer\";\r\nimport { Redirect, useHistory } from \"react-router\";\r\nimport { getAuth } from \"../../redux/selectors\";\r\n\r\ntype propsType = {};\r\n\r\nconst Login: React.FC<propsType> = (props) => {\r\n  const auth = useSelector(getAuth);\r\n  const history = useHistory();\r\n  if (auth) {\r\n    history.push(\"/\");\r\n  }\r\n  return (\r\n    <div>\r\n      <h1>Authorization</h1>\r\n      <LoginForm></LoginForm>\r\n    </div>\r\n  );\r\n};\r\nexport default Login;\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { logoutThunk } from \"../../redux/profile-Reducer\";\r\nimport { getEmail, getLogin } from \"../../redux/selectors\";\r\n\r\ntype propsType = {};\r\n\r\nexport const Profile: React.FC<propsType> = (props) => {\r\n  const login = useSelector(getLogin);\r\n  const email = useSelector(getEmail);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const onSubmit = () => {\r\n    dispatch(logoutThunk());\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div>PROFILE</div>\r\n      <div>\r\n        <span>Login: {login}</span>\r\n      </div>\r\n      <div>\r\n        <span>E-mail: {email}</span>\r\n      </div>\r\n      <div>\r\n        <button onClick={onSubmit}>Exit</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { connect, useSelector } from \"react-redux\";\r\nimport React from \"react\";\r\nimport { AppStateType } from \"../../redux/redux-store\";\r\nimport { Profile } from \"./Profile\";\r\nimport { Redirect, useHistory } from \"react-router\";\r\nimport { getAuth } from \"../../redux/selectors\";\r\n\r\ntype PropsType = {};\r\n\r\nconst ProfileContainer: React.FC<PropsType> = (props) => {\r\n  const auth = useSelector(getAuth);\r\n  const history = useHistory();\r\n\r\n  if (!auth) {\r\n    history.push(\"/login\");\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Profile />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileContainer;\r\n","import { ErrorMessage, Field, Form, Formik } from \"formik\";\r\nimport React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { NavLink, useHistory } from \"react-router-dom\";\r\nimport textError from \"../../common/textError\";\r\nimport * as yup from \"yup\";\r\nimport { getRegistrationSuccess } from \"../../redux/selectors\";\r\nimport { actions, Registration } from \"../../redux/profile-Reducer\";\r\n\r\ntype propsType = {};\r\n\r\ntype onSubmitType = (\r\n  values: {\r\n    login: string;\r\n    email: string;\r\n    pass: string;\r\n    repeatPass: string;\r\n    phone?: string;\r\n  },\r\n  onSubmitProps: any\r\n) => void;\r\n\r\nexport const Reg: React.FC<propsType> = (props) => {\r\n  const registrationSuccess = useSelector(getRegistrationSuccess);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  if (registrationSuccess) {\r\n    dispatch(actions.regOff);\r\n    history.push(\"/login\");\r\n  }\r\n\r\n  const initialValues = {\r\n    login: \"\",\r\n    email: \"\",\r\n    pass: \"\",\r\n    repeatPass: \"\",\r\n    phone: \"\",\r\n  };\r\n\r\n  const validationSchema = yup.object({\r\n    login: yup.string().required(\"Required\"),\r\n    email: yup.string().required(\"Required\"),\r\n    pass: yup.string().required(\"Required\"),\r\n    repeatPass: yup.string().required(\"Required\"),\r\n  });\r\n\r\n  const onSubmit: onSubmitType = (values, onSubmitProps) => {\r\n    onSubmitProps.setSubmitting(true);\r\n    if (values.pass !== values.repeatPass) {\r\n      onSubmitProps.setErrors({\r\n        pass: \"Password mismatch\",\r\n        repeatPass: \"Password mismatch\",\r\n      });\r\n      onSubmitProps.setSubmitting(false);\r\n    } else {\r\n      dispatch(\r\n        Registration(values.login, values.email, values.pass, values.phone)\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={initialValues}\r\n      onSubmit={onSubmit}\r\n      validationSchema={validationSchema}\r\n    >\r\n      {(formik) => {\r\n        return (\r\n          <Form id=\"reg\" name=\"reg\">\r\n            <div>\r\n              <h1 />\r\n              Name\r\n            </div>\r\n            <div>\r\n              <Field type=\"text\" id=\"login\" name=\"login\" />\r\n              <ErrorMessage name=\"login\" component={textError} />\r\n            </div>\r\n            <div>\r\n              <h1 />\r\n              E-mail\r\n            </div>\r\n            <div>\r\n              <Field type=\"text\" id=\"email\" name=\"email\" />\r\n              <ErrorMessage name=\"email\" component={textError} />\r\n            </div>\r\n            <div>\r\n              <h1 />\r\n              Contact phone\r\n            </div>\r\n            <div>\r\n              <Field type=\"password\" id=\"phone\" name=\"phone\" />\r\n              <ErrorMessage name=\"phone\" component={textError} />\r\n            </div>\r\n            <div>\r\n              <h1 />\r\n              Password\r\n            </div>\r\n            <div>\r\n              <Field type=\"password\" id=\"pass\" name=\"pass\" />\r\n              <ErrorMessage name=\"pass\" component={textError} />\r\n            </div>\r\n            <div>\r\n              <h1 />\r\n              Repeat password\r\n            </div>\r\n            <div>\r\n              <Field type=\"password\" id=\"repeatPass\" name=\"repeatPass\" />\r\n              <ErrorMessage name=\"repeatPass\" component={textError} />\r\n            </div>\r\n            <div>\r\n              <button type=\"submit\" disabled={formik.isSubmitting}>\r\n                reg\r\n              </button>\r\n              <NavLink to=\"/login\">Login</NavLink>\r\n            </div>\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { NavLink, useHistory } from \"react-router-dom\";\r\nimport { getAuth } from \"../../redux/selectors\";\r\nimport s from \"./FindUsers.module.css\";\r\n\r\ntype propsType = {};\r\n\r\nexport const FindUser: React.FC<propsType> = (props) => {\r\n  const auth = useSelector(getAuth);\r\n  const history = useHistory();\r\n\r\n  if (!auth) {\r\n    history.push(\"/login\");\r\n  }\r\n  return (\r\n    <div>\r\n      <div>\r\n        <NavLink\r\n          className={s.item}\r\n          activeClassName={s.item_active}\r\n          exact\r\n          to=\"/find/byemail\"\r\n        >\r\n          Find by email\r\n        </NavLink>\r\n      </div>\r\n      <div>\r\n        <NavLink\r\n          className={s.item}\r\n          activeClassName={s.item_active}\r\n          exact\r\n          to=\"/find/byname\"\r\n        >\r\n          Find by name\r\n        </NavLink>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { Formik, Form, Field } from \"formik\";\r\nimport React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { findUserByEmail } from \"../../redux/profile-Reducer\";\r\n\r\ntype propsType = {};\r\n\r\ntype onSumbitType = (\r\n  values: {\r\n    email: string;\r\n  },\r\n  onSubmitProps: any\r\n) => void;\r\n\r\nexport const FindByEmailForm: React.FC<propsType> = (props) => {\r\n  const dispatch = useDispatch();\r\n  const initialValues = {\r\n    email: \"\",\r\n  };\r\n\r\n  const onSubmit: onSumbitType = (values, onSubmitProps) => {\r\n    onSubmitProps.setSubmitting(true);\r\n    dispatch(findUserByEmail(values.email, onSubmitProps));\r\n  };\r\n  return (\r\n    <Formik initialValues={initialValues} onSubmit={onSubmit}>\r\n      {(formik) => {\r\n        return (\r\n          <Form id=\"reg\" name=\"reg\">\r\n            <div>\r\n              E-mail\r\n            </div>\r\n            <div>\r\n              <Field type=\"text\" id=\"email\" name=\"email\" />\r\n            </div>\r\n            <div>\r\n              <button type=\"submit\" disabled={formik.isSubmitting}>\r\n                Find\r\n              </button>\r\n            </div>\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\n","import { Field, Form, Formik } from \"formik\";\r\nimport React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Redirect, useHistory } from \"react-router\";\r\nimport { findUserByEmail, user } from \"../../redux/profile-Reducer\";\r\nimport { getAuth, getFindByEmail } from \"../../redux/selectors\";\r\nimport { FindByEmailForm } from \"./FindByEmailForm\";\r\n\r\ntype propsType = {};\r\n\r\nexport const FindByEmail: React.FC<propsType> = () => {\r\n  const user: user[] | null = useSelector(getFindByEmail);\r\n\r\n  const auth = useSelector(getAuth);\r\n  const history = useHistory();\r\n\r\n  if (!auth) {\r\n    history.push(\"/login\");\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <FindByEmailForm />\r\n      {user &&\r\n        user.map((user) => (\r\n          <div>\r\n            <div>\r\n              <span>Name: {user?.username}</span>\r\n            </div>\r\n            <div>\r\n              <span>Email: {user?.email}</span>\r\n            </div>\r\n            <div>\r\n              <span>Phone: {user?.contactPhone}</span>\r\n            </div>\r\n            <div>\r\n              <button\r\n                onClick={() => {\r\n                  history.push(`/chat/user/${user.email}`);\r\n                }}\r\n              >\r\n                Chat\r\n              </button>\r\n            </div>\r\n            <hr color=\"black\" />\r\n          </div>\r\n        ))}\r\n    </div>\r\n  );\r\n};\r\n","import { Field, Form, Formik } from \"formik\";\r\nimport React from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Redirect, useHistory } from \"react-router\";\r\nimport {\r\n  findUserByEmail,\r\n  findUserByName,\r\n  user,\r\n} from \"../../redux/profile-Reducer\";\r\nimport {\r\n  getAuth,\r\n  getFindByEmail,\r\n  getFindByName,\r\n  getInitFBN,\r\n} from \"../../redux/selectors\";\r\n\r\ntype propsType = {};\r\n\r\ntype onSumbitType = (\r\n  values: {\r\n    email: string;\r\n  },\r\n  onSubmitProps: any\r\n) => void;\r\n\r\nexport const FindByName: React.FC<propsType> = React.memo((props) => {\r\n  const auth = useSelector(getAuth);\r\n  const history = useHistory();\r\n  const initFBN = useSelector(getInitFBN);\r\n\r\n  if (!auth) {\r\n    history.push(\"/login\");\r\n  }\r\n\r\n  const user: user[] | null = useSelector(getFindByName);\r\n\r\n  const dispatch = useDispatch();\r\n  const initialValues = {\r\n    email: \"\",\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   if(initFBN)\r\n  // })\r\n\r\n  const onSubmit: onSumbitType = (values, onSubmitProps) => {\r\n    onSubmitProps.setSubmitting(true);\r\n    dispatch(findUserByName(values.email, onSubmitProps));\r\n  };\r\n  console.log(\"findByName\");\r\n  console.log(user);\r\n\r\n  return (\r\n    <div>\r\n      <Formik initialValues={initialValues} onSubmit={onSubmit}>\r\n        {(formik) => {\r\n          return (\r\n            <Form id=\"reg\" name=\"reg\">\r\n              <div>Name</div>\r\n              <div>\r\n                <Field type=\"text\" id=\"email\" name=\"email\" />\r\n              </div>\r\n              <div>\r\n                <button type=\"submit\" disabled={formik.isSubmitting}>\r\n                  Find\r\n                </button>\r\n              </div>\r\n            </Form>\r\n          );\r\n        }}\r\n      </Formik>\r\n      {user &&\r\n        user?.map((el) => {\r\n          return (\r\n            <div>\r\n              <div>\r\n                <span>Name: {el.username}</span>\r\n              </div>\r\n              <div>\r\n                <span>E mail: {el.email}</span>\r\n              </div>\r\n              <div>\r\n                <span>Phone: {el.contactPhone}</span>\r\n              </div>\r\n              <div>\r\n                <button\r\n                  onClick={() => {\r\n                    history.push(`/chat/user/${el.email}`);\r\n                  }}\r\n                >\r\n                  Chat\r\n                </button>\r\n              </div>\r\n              <hr color=\"black\" />\r\n            </div>\r\n          );\r\n        })}\r\n    </div>\r\n  );\r\n});\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router\";\r\nimport { getAuth } from \"../../redux/selectors\";\r\n\r\ntype propsType = {};\r\n\r\nexport const Posts: React.FC<propsType> = (porps) => {\r\n  const history = useHistory();\r\n  const auth = useSelector(getAuth);\r\n\r\n  if (!auth) {\r\n    history.push(\"/login\");\r\n  }\r\n\r\n  const myAdvertisement = () => {\r\n    history.push(\"/posts/my\");\r\n  };\r\n\r\n  const allAdvertisement = () => {\r\n    history.push(\"/posts/all\");\r\n  };\r\n\r\n  const createAdvertisement = () => {\r\n    history.push(\"/posts/create\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <button onClick={myAdvertisement}> My Advertisement</button>\r\n        <button onClick={allAdvertisement}> All Advertisement</button>\r\n      </div>\r\n      <div>\r\n        <button onClick={createAdvertisement}>Create Advertisement</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { AdvertisementType } from \"../types/types\";\r\nimport { BaseResponseType, instance } from \"./api\";\r\n\r\nexport const advertisementApi = {\r\n  getAllAdvertisement() {\r\n    return instance\r\n      .get<BaseResponseType<allAdvertisementDataType>>(\"/advertisement/all\")\r\n      .then((res) => res.data);\r\n  },\r\n  getMyAdvertisement() {\r\n    return instance\r\n      .get<BaseResponseType<allAdvertisementDataType>>(\"/advertisement/my\")\r\n      .then((res) => res.data);\r\n  },\r\n  createAdvertisement(\r\n    shortText: string,\r\n    descriprtion?: string,\r\n    images?: File,\r\n    tags?: string[]\r\n  ) {\r\n    const formData = new FormData();\r\n    formData.append(\"shortText\", shortText);\r\n    descriprtion && formData.append(\"description\", descriprtion);\r\n    images && formData.append(\"images\", images);\r\n    tags && formData.append(\"tags\", JSON.stringify(tags));\r\n    return instance\r\n      .post<BaseResponseType>(\"/advertisement/create\", formData, {\r\n        headers: { \"Content-type\": \"multipart/form-data\" },\r\n      })\r\n      .then((res) => res.data);\r\n  },\r\n  findInAll(shortText: string) {\r\n    return instance\r\n      .post<BaseResponseType<allAdvertisementDataType>>(\"/find/all\", {\r\n        shortText,\r\n      })\r\n      .then((res) => res.data);\r\n  },\r\n  findInMy(shortText: string) {\r\n    return instance\r\n      .post<BaseResponseType<allAdvertisementDataType>>(\"/find/my\", {\r\n        shortText,\r\n      })\r\n      .then((res) => res.data);\r\n  },\r\n  delete(id: string) {\r\n    return instance\r\n      .post<BaseResponseType>(\"delete\", {\r\n        id,\r\n      })\r\n      .then((res) => res.data);\r\n  },\r\n};\r\n\r\ntype allAdvertisementDataType = AdvertisementType[];\r\n","import { advertisementApi } from \"../API/advertisementApi\";\r\nimport { ResultCodeEnum } from \"../API/api\";\r\nimport { AdvertisementType } from \"../types/types\";\r\nimport { InferActionsType, ThunkType } from \"./redux-store\";\r\n\r\nlet initState = {\r\n  myAdvertisement: null as AdvertisementType[] | null,\r\n  initMy: false,\r\n  allAdvertisement: null as AdvertisementType[] | null,\r\n  initAll: false,\r\n  redirectAfterCreate: false,\r\n};\r\n\r\ntype initStateAdvertisementType = typeof initState;\r\n\r\nexport const AdvertisementReducer = (\r\n  state = initState,\r\n  action: advertisementActionType\r\n): initStateAdvertisementType => {\r\n  switch (action.type) {\r\n    case \"advertisement/setAllAdvertisement\": {\r\n      return {\r\n        ...state,\r\n        allAdvertisement: action.advertisement,\r\n        initAll: true,\r\n      };\r\n    }\r\n    case \"advertisement/setMyAdvertisement\": {\r\n      return {\r\n        ...state,\r\n        myAdvertisement: action.advertisement,\r\n        initMy: true,\r\n      };\r\n    }\r\n    case \"advertisement/setRedirectOn\": {\r\n      return {\r\n        ...state,\r\n        redirectAfterCreate: true,\r\n      };\r\n    }\r\n    case \"advertisement/setRedirectOff\": {\r\n      return {\r\n        ...state,\r\n        redirectAfterCreate: false,\r\n      };\r\n    }\r\n    case \"advertisement/setInitAllFalse\": {\r\n      return {\r\n        ...state,\r\n        initAll: false,\r\n      };\r\n    }\r\n    case \"advertisement/setInitMyFalse\": {\r\n      return {\r\n        ...state,\r\n        initMy: false,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\ntype advertisementActionType = InferActionsType<typeof actions>;\r\n\r\nexport const actions = {\r\n  setMyAdvertisement: (advertisement: AdvertisementType[]) =>\r\n    ({\r\n      type: \"advertisement/setMyAdvertisement\",\r\n      advertisement,\r\n    } as const),\r\n  setAllAdvertisement: (advertisement: AdvertisementType[]) =>\r\n    ({\r\n      type: \"advertisement/setAllAdvertisement\",\r\n      advertisement,\r\n    } as const),\r\n  redirectOn: () =>\r\n    ({\r\n      type: \"advertisement/setRedirectOn\",\r\n    } as const),\r\n  redirectOff: () =>\r\n    ({\r\n      type: \"advertisement/setRedirectOff\",\r\n    } as const),\r\n  setInitAllFalse: () =>\r\n    ({\r\n      type: \"advertisement/setInitAllFalse\",\r\n    } as const),\r\n  setInitMyFalse: () =>\r\n    ({\r\n      type: \"advertisement/setInitMyFalse\",\r\n    } as const),\r\n};\r\n\r\nexport const getAllAdvertisement =\r\n  (onSubmitProps?: any): ThunkType<advertisementActionType> =>\r\n  async (dispatch) => {\r\n    let response = await advertisementApi.getAllAdvertisement();\r\n    onSubmitProps?.setSubmitting(false);\r\n    if (response.resultCode === ResultCodeEnum.success) {\r\n      dispatch(actions.setAllAdvertisement(response.d));\r\n    }\r\n  };\r\n\r\nexport const getMyAdvertisement =\r\n  (onSubmitProps?: any): ThunkType<advertisementActionType> =>\r\n  async (dispatch) => {\r\n    let response = await advertisementApi.getMyAdvertisement();\r\n    onSubmitProps?.setSubmitting(false);\r\n    if (response.resultCode === ResultCodeEnum.success) {\r\n      dispatch(actions.setMyAdvertisement(response.d));\r\n    }\r\n  };\r\n\r\nexport const createAdvertisement =\r\n  (\r\n    onSubmitProps: any,\r\n    shortText: string,\r\n    description?: string,\r\n    images?: File,\r\n    tags?: string[]\r\n  ): ThunkType<advertisementActionType> =>\r\n  async (dispatch) => {\r\n    console.log(images);\r\n    let response = await advertisementApi.createAdvertisement(\r\n      shortText,\r\n      description,\r\n      images,\r\n      tags\r\n    );\r\n    onSubmitProps.setSubmitting(false);\r\n    if (response.resultCode === ResultCodeEnum.success) {\r\n      dispatch(actions.redirectOn());\r\n    }\r\n  };\r\n\r\nexport const getAllAdvertisementWithKey =\r\n  (onSubmitProps: any, shortText: string): ThunkType<advertisementActionType> =>\r\n  async (dispatch) => {\r\n    let response = await advertisementApi.findInAll(shortText);\r\n    onSubmitProps.setSubmitting(false);\r\n    if (response.resultCode === ResultCodeEnum.success) {\r\n      dispatch(actions.setAllAdvertisement(response.d));\r\n    }\r\n  };\r\n\r\nexport const getMyAdvertisementWithKey =\r\n  (onSubmitProps: any, shortText: string): ThunkType<advertisementActionType> =>\r\n  async (dispatch) => {\r\n    let response = await advertisementApi.findInMy(shortText);\r\n    onSubmitProps.setSubmitting(false);\r\n    if (response.resultCode === ResultCodeEnum.success) {\r\n      dispatch(actions.setMyAdvertisement(response.d));\r\n    }\r\n  };\r\n\r\nexport const deleteMyAdverisement =\r\n  (id: string): ThunkType<advertisementActionType> =>\r\n  async (dispatch) => {\r\n    let response = await advertisementApi.delete(id);\r\n    if (response.resultCode === ResultCodeEnum.success) {\r\n      dispatch(getMyAdvertisement());\r\n    }\r\n  };\r\n","import { ErrorMessage, Field, Form, Formik } from \"formik\";\r\nimport React from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router\";\r\nimport textError from \"../../common/textError\";\r\nimport {\r\n  actions,\r\n  getAllAdvertisement,\r\n  getAllAdvertisementWithKey,\r\n} from \"../../redux/advertisement-Reducer\";\r\nimport {\r\n  getAllAdvertisementSelector,\r\n  getAuth,\r\n  getInitAllAdvertisement,\r\n} from \"../../redux/selectors\";\r\nimport s from \"./posts.module.css\";\r\n\r\ntype propsType = {};\r\n\r\ntype onSubmitType = (\r\n  values: {\r\n    findFromAll: string;\r\n  },\r\n  onSubmitProps: any\r\n) => void;\r\n\r\nexport const AllAdvertisement: React.FC<propsType> = () => {\r\n  const history = useHistory();\r\n  const auth = useSelector(getAuth);\r\n\r\n  if (!auth) {\r\n    history.push(\"/login\");\r\n  }\r\n  const initAll = useSelector(getInitAllAdvertisement);\r\n  const dispatch = useDispatch();\r\n  const advertisement = useSelector(getAllAdvertisementSelector);\r\n\r\n  console.log(initAll + \"1\");\r\n  useEffect(() => {\r\n    if (!initAll) {\r\n      dispatch(getAllAdvertisement());\r\n    }\r\n    return () => {\r\n      console.log(initAll + \"2\");\r\n      dispatch(actions.setInitAllFalse());\r\n      console.log(initAll + \"3\");\r\n    };\r\n  }, []);\r\n\r\n  const initialValues = {\r\n    findFromAll: \"\",\r\n  };\r\n\r\n  const onSubmit: onSubmitType = (values, onSubmitProps) => {\r\n    onSubmitProps.setSubmitting(true);\r\n    console.log(values.findFromAll);\r\n    dispatch(getAllAdvertisementWithKey(onSubmitProps, values.findFromAll));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Formik initialValues={initialValues} onSubmit={onSubmit}>\r\n        {(formik) => {\r\n          return (\r\n            <Form id=\"all\" name=\"all\">\r\n              <div>\r\n                <Field type=\"text\" id=\"findFromAll\" name=\"findFromAll\" />\r\n                <ErrorMessage name=\"findFromAll\" component={textError} />\r\n                <button type=\"submit\" disabled={formik.isSubmitting}>\r\n                  Find\r\n                </button>\r\n              </div>\r\n              {advertisement &&\r\n                advertisement?.map((el) => {\r\n                  return (\r\n                    <div>\r\n                      <div>\r\n                        <img src={el.images.file} className={s.img}></img>\r\n                      </div>\r\n                      <div>\r\n                        <span>shortText: {el.shortText}</span>\r\n                      </div>\r\n                      <div>\r\n                        <span>description: {el.description} </span>\r\n                      </div>\r\n                      <div>\r\n                        <span>Created: {el.createdAt}</span>\r\n                      </div>\r\n                      <div>\r\n                        <span>Updated: {el.updatedAt}</span>\r\n                      </div>\r\n                      <div>\r\n                        <span>\r\n                          Tags:{\" \"}\r\n                          {el.tags.map((obj) => {\r\n                            return <span>{obj}, </span>;\r\n                          })}\r\n                        </span>\r\n                      </div>\r\n                      <div>\r\n                        <span>userId: {el.userId}</span>\r\n                      </div>\r\n                      <hr color=\"black\" />\r\n                    </div>\r\n                  );\r\n                })}\r\n            </Form>\r\n          );\r\n        }}\r\n      </Formik>\r\n    </div>\r\n  );\r\n};\r\n","import { ErrorMessage, Field, Form, Formik } from \"formik\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router\";\r\nimport textError from \"../../common/textError\";\r\nimport {\r\n  actions,\r\n  deleteMyAdverisement,\r\n  getAllAdvertisement,\r\n  getMyAdvertisement,\r\n  getMyAdvertisementWithKey,\r\n} from \"../../redux/advertisement-Reducer\";\r\nimport {\r\n  getAuth,\r\n  getInitMyAdvertisement,\r\n  getMyAdvertisementSelector,\r\n} from \"../../redux/selectors\";\r\nimport s from \"./posts.module.css\";\r\n\r\ntype propsType = {};\r\n\r\ntype onSubmitType = (\r\n  values: {\r\n    findFromMy: string;\r\n  },\r\n  onSubmitProps: any\r\n) => void;\r\n\r\nexport const MyAdvertisement: React.FC<propsType> = () => {\r\n  const history = useHistory();\r\n  const auth = useSelector(getAuth);\r\n\r\n  if (!auth) {\r\n    history.push(\"/login\");\r\n  }\r\n\r\n  const initMy = useSelector(getInitMyAdvertisement);\r\n  const dispatch = useDispatch();\r\n  const advertisement = useSelector(getMyAdvertisementSelector);\r\n  if (!initMy) {\r\n    dispatch(getMyAdvertisement());\r\n  }\r\n  console.log(initMy);\r\n\r\n  const initialValues = {\r\n    findFromMy: \"\",\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!initMy) {\r\n      dispatch(getAllAdvertisement());\r\n    }\r\n    return () => {\r\n      console.log(initMy + \"2\");\r\n      dispatch(actions.setInitMyFalse());\r\n      console.log(initMy + \"3\");\r\n    };\r\n  }, []);\r\n\r\n  const onSubmit: onSubmitType = (values, onSubmitProps) => {\r\n    onSubmitProps.setSubmitting(true);\r\n    dispatch(getMyAdvertisementWithKey(onSubmitProps, values.findFromMy));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Formik initialValues={initialValues} onSubmit={onSubmit}>\r\n        {(formik) => {\r\n          return (\r\n            <Form id=\"my\" name=\"my\">\r\n              <div>\r\n                <Field type=\"text\" id=\"findFromMy\" name=\"findFromMy\" />\r\n                <ErrorMessage name=\"findFromMy\" component={textError} />\r\n                <button type=\"submit\" disabled={formik.isSubmitting}>\r\n                  Find\r\n                </button>\r\n              </div>\r\n              {advertisement &&\r\n                advertisement.map((el) => {\r\n                  return (\r\n                    <div>\r\n                      <div>\r\n                        <img src={el.images.file} className={s.img}></img>\r\n                      </div>\r\n                      <div>\r\n                        <span>shortText: {el.shortText}</span>\r\n                      </div>\r\n                      <div>\r\n                        <span>description: {el.description} </span>\r\n                      </div>\r\n                      <div>\r\n                        <span>Created: {el.createdAt}</span>\r\n                      </div>\r\n                      <div>\r\n                        <span>Updated: {el.updatedAt}</span>\r\n                      </div>\r\n                      <div>\r\n                        <span>\r\n                          Tags:{\" \"}\r\n                          {el.tags.map((obj) => {\r\n                            return <span>{obj}, </span>;\r\n                          })}\r\n                        </span>\r\n                      </div>\r\n                      <div>\r\n                        DeleteStatus: {el.isDeleted ? \"deleted\" : \"available\"}\r\n                      </div>\r\n                      <div>\r\n                        <span>userId: {el.userId}</span>\r\n                      </div>\r\n                      {!el.isDeleted && (\r\n                        <div>\r\n                          <button\r\n                            onClick={() => {\r\n                              dispatch(deleteMyAdverisement(el._id));\r\n                            }}\r\n                          >\r\n                            DELETE\r\n                          </button>\r\n                        </div>\r\n                      )}\r\n\r\n                      <hr color=\"black\" />\r\n                    </div>\r\n                  );\r\n                })}\r\n            </Form>\r\n          );\r\n        }}\r\n      </Formik>\r\n    </div>\r\n  );\r\n};\r\n","import { ErrorMessage, Field, Form, Formik } from \"formik\";\r\nimport React, { ChangeEvent } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router\";\r\nimport { getAuth, getRedirectAfterCreateAdv } from \"../../redux/selectors\";\r\nimport * as yup from \"yup\";\r\nimport textError from \"../../common/textError\";\r\nimport {\r\n  actions,\r\n  createAdvertisement,\r\n} from \"../../redux/advertisement-Reducer\";\r\n\r\ntype propsType = {};\r\n\r\ntype onSubmitType = (\r\n  values: {\r\n    shortText: string;\r\n    description: string;\r\n    images: File;\r\n    tags: string;\r\n  },\r\n  onSubmitProps: any\r\n) => void;\r\n\r\nexport const CreateAdvertisement: React.FC<propsType> = (props) => {\r\n  const redirect = useSelector(getRedirectAfterCreateAdv);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const auth = useSelector(getAuth);\r\n  if (!auth) {\r\n    history.push(\"/login\");\r\n  }\r\n\r\n  if (redirect) {\r\n    dispatch(actions.redirectOff());\r\n    history.push(\"/posts/my\");\r\n  }\r\n\r\n  const initialValues = {\r\n    shortText: \"\",\r\n    description: \"\",\r\n    tags: \"\",\r\n    images: null as unknown as File,\r\n  };\r\n\r\n  const validationSchema = yup.object({\r\n    shortText: yup.string().required(\"Required\"),\r\n  });\r\n\r\n  const onSubmit: onSubmitType = (values, onSubmitProps) => {\r\n    console.log(values.images);\r\n    onSubmitProps.setSubmitting(true);\r\n    const tags = values.tags.split(\" \");\r\n    dispatch(\r\n      createAdvertisement(\r\n        onSubmitProps,\r\n        values.shortText,\r\n        values.description,\r\n        values.images,\r\n        tags\r\n      )\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div>Create Advertisement</div>\r\n      <Formik\r\n        initialValues={initialValues}\r\n        onSubmit={onSubmit}\r\n        validationSchema={validationSchema}\r\n      >\r\n        {(formik) => {\r\n          return (\r\n            <Form id=\"createAdv\" name=\"createAdv\">\r\n              <div>shortText</div>\r\n              <div>\r\n                <Field type=\"text\" id=\"shortText\" name=\"shortText\" />\r\n                <ErrorMessage name=\"shortText\" component={textError} />\r\n              </div>\r\n              <div>description</div>\r\n              <div>\r\n                <Field type=\"text\" id=\"description\" name=\"description\" />\r\n                <ErrorMessage name=\"description\" component={textError} />\r\n              </div>\r\n              <div>images</div>\r\n              <input\r\n                accept={\".jpg, .jpeg, .png\"}\r\n                type=\"file\"\r\n                onChange={(event: ChangeEvent<HTMLInputElement>) => {\r\n                  if (event.target.files?.length) {\r\n                    console.log(event.target.files[0]);\r\n                    formik.setFieldValue(\"images\", event.target.files[0]);\r\n                  }\r\n                }}\r\n              />\r\n              <div>tags</div>\r\n              <div>\r\n                <Field type=\"text\" id=\"tags\" name=\"tags\" />\r\n                <ErrorMessage name=\"tags\" component={textError} />\r\n              </div>\r\n              <div>\r\n                <button type=\"submit\" disabled={formik.isSubmitting}>\r\n                  Create\r\n                </button>\r\n              </div>\r\n            </Form>\r\n          );\r\n        }}\r\n      </Formik>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { NavLink, useHistory } from \"react-router-dom\";\r\nimport { getAuth } from \"../../redux/selectors\";\r\n\r\ntype propsType = {};\r\n\r\nexport const Chat: React.FC<propsType> = () => {\r\n  const auth = useSelector(getAuth);\r\n  const history = useHistory();\r\n  if (!auth) {\r\n    history.push(\"/login\");\r\n  }\r\n  return (\r\n    <div>\r\n      <div>\r\n        <NavLink to=\"/chat/all\">Common chat</NavLink>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useRef, useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router\";\r\nimport { chatApi } from \"../../API/chatApiv2\";\r\nimport { getAuth, getEmail, getMessages } from \"../../redux/selectors\";\r\nimport { message } from \"../../types/types\";\r\n\r\ntype propstType = {};\r\n\r\nexport const CommonChat: React.FC<propstType> = () => {\r\n  const auth = useSelector(getAuth);\r\n  const history = useHistory();\r\n  if (!auth) {\r\n    history.push(\"/login\");\r\n  }\r\n  const username = useSelector(getEmail);\r\n  const [message, setMessage] = useState(\"\");\r\n  const messages = useSelector(getMessages);\r\n  const [isAutoScroll, setIsAutoScroll] = useState(false);\r\n\r\n  const messagesAnchorRef = useRef<HTMLDivElement>(null);\r\n  useEffect(() => {\r\n    if (isAutoScroll) {\r\n      messagesAnchorRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n    }\r\n  }, [messages]);\r\n  const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n    const element = e.currentTarget;\r\n    if (\r\n      Math.abs(\r\n        element.scrollHeight - element.scrollTop - element.clientHeight\r\n      ) < 300\r\n    ) {\r\n      !isAutoScroll && setIsAutoScroll(true);\r\n    } else {\r\n      isAutoScroll && setIsAutoScroll(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div>CHAT COMMON</div>\r\n      <div\r\n        style={{ height: \"500px\", overflowY: \"auto\" }}\r\n        onScroll={scrollHandler}\r\n      >\r\n        {messages.map((el) => (\r\n          <Message msg={el} />\r\n        ))}\r\n        <div ref={messagesAnchorRef}></div>\r\n      </div>\r\n      <div>\r\n        <div>\r\n          <textarea\r\n            onChange={(e) => setMessage(e.currentTarget.value)}\r\n            value={message}\r\n          ></textarea>\r\n          <div></div>\r\n        </div>\r\n        <div>\r\n          <button\r\n            onClick={() => {\r\n              chatApi.sendAll(message, username);\r\n              setMessage(\"\");\r\n            }}\r\n          >\r\n            Send\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const Message: React.FC<{ msg: message }> = React.memo(({ msg }) => {\r\n  return (\r\n    <div>\r\n      <b>Username: {msg.username}</b>\r\n      <br />\r\n      {\"Text: \"}\r\n      {msg.text}\r\n      <br />\r\n      {\"Date: \"}\r\n      {msg.Data}\r\n      <hr />\r\n    </div>\r\n  );\r\n});\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router\";\r\nimport { chatApi } from \"../../API/chatApiv2\";\r\nimport {\r\n  ConnectSocket,\r\n  DisconnectSocket,\r\n  SubscribeToAll,\r\n  SubscribeToRoom,\r\n} from \"../../redux/chat-Reducer\";\r\nimport { getAuth, getEmail, getPrivateMessages } from \"../../redux/selectors\";\r\nimport { Message } from \"./CommonChat\";\r\n\r\nexport const ChatUsers: React.FC<{}> = () => {\r\n  const auth = useSelector(getAuth);\r\n  const history = useHistory();\r\n  const arrayPath = history.location.pathname.split(\"/\");\r\n  const user = arrayPath[arrayPath.length - 1];\r\n  const usernameMy = useSelector(getEmail);\r\n  const dispatch = useDispatch();\r\n\r\n  if (!auth) {\r\n    history.push(\"/login\");\r\n  }\r\n\r\n  useEffect(() => {\r\n    dispatch(DisconnectSocket());\r\n    chatApi.connect(`${usernameMy}-${user}`);\r\n    dispatch(SubscribeToRoom());\r\n    return () => {\r\n      debugger;\r\n      dispatch(DisconnectSocket());\r\n      dispatch(ConnectSocket());\r\n      dispatch(SubscribeToAll());\r\n    };\r\n  }, []);\r\n\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  const [isAutoScroll, setIsAutoScroll] = useState(false);\r\n\r\n  const messages = useSelector(getPrivateMessages);\r\n\r\n  const messagesAnchorRef = useRef<HTMLDivElement>(null);\r\n  useEffect(() => {\r\n    if (isAutoScroll) {\r\n      messagesAnchorRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n    }\r\n  }, [messages]);\r\n\r\n  const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n    const element = e.currentTarget;\r\n    if (\r\n      Math.abs(\r\n        element.scrollHeight - element.scrollTop - element.clientHeight\r\n      ) < 300\r\n    ) {\r\n      !isAutoScroll && setIsAutoScroll(true);\r\n    } else {\r\n      isAutoScroll && setIsAutoScroll(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div>Chat with {user}</div>\r\n      <div\r\n        style={{ height: \"500px\", overflowY: \"auto\" }}\r\n        onScroll={scrollHandler}\r\n      >\r\n        {messages.map((el) => (\r\n          <Message msg={el} />\r\n        ))}\r\n        <div ref={messagesAnchorRef}></div>\r\n      </div>\r\n      <div>\r\n        <div>\r\n          <textarea\r\n            onChange={(e) => setMessage(e.currentTarget.value)}\r\n            value={message}\r\n          ></textarea>\r\n        </div>\r\n        <div>\r\n          <button\r\n            onClick={() => {\r\n              chatApi.sendRoom(message, usernameMy);\r\n              setMessage(\"\");\r\n            }}\r\n          >\r\n            Send\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\nimport { NavBar } from \"./components/navbar/NavBar\";\nimport s from \"./App.module.css\";\nimport { Redirect, Route, useHistory, withRouter } from \"react-router\";\nimport Login from \"./components/login/Login\";\nimport ProfileContainer from \"./components/profile/ProfileContainer\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { actions, getWhoAmI } from \"./redux/profile-Reducer\";\nimport { useEffect } from \"react\";\nimport { getAuth, getEmail, getInitApp } from \"./redux/selectors\";\nimport { Reg } from \"./components/reg/Reg\";\nimport { FindUser } from \"./components/findUser/FindUser\";\nimport { FindByEmail } from \"./components/findUser/FindByEmail\";\nimport { FindByName } from \"./components/findUser/FindByName\";\nimport { compose } from \"redux\";\nimport { Posts } from \"./components/posts/Posts\";\nimport { AllAdvertisement } from \"./components/posts/AllAdvertisement\";\nimport { MyAdvertisement } from \"./components/posts/MyAdvertisement\";\nimport { CreateAdvertisement } from \"./components/posts/CreateAdvertisement\";\nimport { Chat } from \"./components/chat/Chat\";\nimport { CommonChat } from \"./components/chat/CommonChat\";\nimport { socket } from \"./API/chatApiv2\";\nimport { ChatUsers } from \"./components/chat/ChatUsers\";\nimport {\n  ConnectSocket,\n  DisconnectSocket,\n  ReconnectToAll,\n  SubscribeToAll,\n} from \"./redux/chat-Reducer\";\n\ntype propsType = {};\n\nconst App: React.FC<propsType> = (props) => {\n  const init = useSelector(getInitApp);\n  const auth = useSelector(getAuth);\n  const dispatch = useDispatch();\n\n  if (!init) {\n    dispatch(getWhoAmI());\n  }\n\n  useEffect(() => {\n    if (auth) {\n      // dispatch(DisconnectSocket());\n      // dispatch(ConnectSocket());\n      // dispatch(SubscribeToAll());\n      debugger;\n      dispatch(ReconnectToAll());\n    }\n    return () => {\n      dispatch(DisconnectSocket());\n    };\n  }, [auth]);\n\n  return (\n    <div className={s.MainDiv}>\n      <div className={s.Header}>DELIVERY</div>\n      <div className={s.AllContent}>\n        <NavBar></NavBar>\n        <Route exact path=\"/\" component={ProfileContainer} />\n        <Route exact path=\"/finduser\" component={FindUser} />\n        <Route exact path=\"/find/byemail\" component={FindByEmail} />\n        <Route exact path=\"/find/byname\" component={FindByName} />\n        <Route exact path=\"/posts\" component={Posts} />\n        <Route exact path=\"/posts/all\" component={AllAdvertisement} />\n        <Route exact path=\"/posts/my\" component={MyAdvertisement} />\n        <Route exact path=\"/posts/create\" component={CreateAdvertisement} />\n        <Route path=\"/login\" component={Login} />\n        <Route path=\"/reg\" component={Reg} />\n        <Route exact path=\"/chat/all\" component={CommonChat} />\n        <Route exact path=\"/chat\" component={Chat} />\n        <Route exact path=\"/chat/user/:user\" component={ChatUsers} />\n        {/* <Route path=\"*\" render={() => <div>404 NOT FOUND</div>} /> */}\n      </div>\n    </div>\n  );\n};\n\nexport default compose<React.FC>(withRouter)(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { Action, applyMiddleware, combineReducers, createStore } from \"redux\";\r\nimport ProfileReducer from \"./profile-Reducer\";\r\nimport thunkMiddleware, { ThunkAction } from \"redux-thunk\";\r\nimport { AdvertisementReducer } from \"./advertisement-Reducer\";\r\nimport { chatReducer } from \"./chat-Reducer\";\r\n\r\nlet reducers = combineReducers({\r\n  profilePage: ProfileReducer,\r\n  advertisement: AdvertisementReducer,\r\n  chatPage: chatReducer,\r\n});\r\n\r\ntype PropertyType<T> = T extends { [key: string]: infer U } ? U : never;\r\n\r\nexport type InferActionsType<\r\n  T extends { [key: string]: (...args: any[]) => any }\r\n> = ReturnType<PropertyType<T>>;\r\n\r\nexport type ThunkType<A extends Action, R = Promise<void>> = ThunkAction<\r\n  R,\r\n  AppStateType,\r\n  unknown,\r\n  A\r\n>;\r\n\r\ntype RootReducerType = typeof reducers;\r\nexport type AppStateType = ReturnType<RootReducerType>;\r\n\r\nlet store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/redux-store\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"FindUsers_item__35RHQ\",\"item_active\":\"FindUsers_item_active__1q0B0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"img\":\"posts_img__r62Vy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MainDiv\":\"App_MainDiv__1wx72\",\"Header\":\"App_Header__1mk9A\",\"AllContent\":\"App_AllContent__2W8-l\",\"NavBar\":\"App_NavBar__2XiYb\",\"Content\":\"App_Content__13F6u\"};"],"sourceRoot":""}